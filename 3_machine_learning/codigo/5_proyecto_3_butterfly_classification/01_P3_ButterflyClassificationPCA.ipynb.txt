{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/BrajanNieto/Tareas_Programacion101_BrajanNieto/blob/main/01_P3_ButterflyClassificationPCA.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        " # Proyecto de clasificación 'Butterfly Image Classification with PyTorch neural networks'\n",
        " ----\n",
        "  \n",
        "  University : UTEC \\\\\n",
        "  Course       : Machine Learning \\\\\n",
        "  Professor    : Cristian López Del Alamo \\\\\n",
        "  Topic        : SVM \\\\\n",
        "  Deadline      : 18-08-2025\n",
        "   \n",
        "\n",
        " ----\n",
        "\n",
        "Write the names and surnames of the members and the percentage of participation of each one in the development of the practice:\n",
        " - Integrante 1: Lopez Medina Sebastian 100%\n",
        " - Integrante 2: Nieto Espinoza Brajan Esteban 100%\n",
        " - Integrante 3: Tapia Chasquibol Mateo 100%\n",
        "\n",
        " ----\n",
        " The objective of this project is to classify butterflies ."
      ],
      "metadata": {
        "id": "WrEdLIAuVClr"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# ============================================\n",
        "# 0. Insttalaciones\n",
        "# ============================================\n",
        "%pip -q install kagglehub scikit-learn pandas matplotlib seaborn pillow"
      ],
      "metadata": {
        "id": "rFi6SCfNezrJ"
      },
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# ============================================\n",
        "# 1. Librerías\n",
        "# ============================================\n",
        "\n",
        "# --- librerías estándar ---\n",
        "import os, glob, math, random, time, itertools\n",
        "from pathlib import Path\n",
        "from typing import List, Tuple, Dict\n",
        "from itertools import product\n",
        "from typing import Optional\n",
        "# ------------- librerías comunes ----\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from PIL import Image as PILImage\n",
        "from IPython.display import Image as IPyImage, display\n",
        "\n",
        "# --- PyTorch ----- torchvision ---\n",
        "import torch\n",
        "import torch.nn as nn\n",
        "from torch.utils.data import Dataset, DataLoader\n",
        "from torchvision import transforms\n",
        "\n",
        "# --- Scikit-learn ---\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import (\n",
        "    accuracy_score, precision_score, recall_score,\n",
        "    f1_score, confusion_matrix, classification_report\n",
        ")\n",
        "\n",
        "# --- Kaggle (descarga de datos) ---\n",
        "import kagglehub\n",
        "\n",
        "\n",
        "# --- Info de paquetes ---\n",
        "print(\"PyTorch:\", torch.__version__)\n",
        "print(\"CUDA disponible:\", torch.cuda.is_available())\n",
        "print(\"NumPy:\", np.__version__)\n",
        "print(\"Pandas:\", pd.__version__)\n",
        "print(\"Matplotlib:\", plt.matplotlib.__version__)\n",
        "print(\"Seaborn:\", sns.__version__)\n"
      ],
      "metadata": {
        "id": "8U6Gyn-teupR",
        "outputId": "435e63fd-76fe-486e-9581-7aa97b79796c",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "PyTorch: 2.8.0+cu126\n",
            "CUDA disponible: False\n",
            "NumPy: 2.0.2\n",
            "Pandas: 2.2.2\n",
            "Matplotlib: 3.10.0\n",
            "Seaborn: 0.13.2\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# ========================================================\n",
        "# 2. Carga de datos, reproducibilidad, plotar imagenes\n",
        "# ========================================================\n",
        "# Descargar\n",
        "path = kagglehub.dataset_download(\"veeralakrishna/butterfly-dataset\")\n",
        "print(\"Descargado en:\", path)\n",
        "DATA_ROOT = Path(path) / \"leedsbutterfly\"\n",
        "print(\"DATA_ROOT:\", DATA_ROOT)\n",
        "# ver estructura\n",
        "!find \"$DATA_ROOT\" -maxdepth 2 -type d | sed 's|^|DIR: |'\n",
        "\n",
        "# -------------------------\n",
        "# Reproducibilidad\n",
        "# -------------------------\n",
        "def set_seed(seed: int = 42):\n",
        "    random.seed(seed)\n",
        "    np.random.seed(seed)\n",
        "    torch.manual_seed(seed)\n",
        "    torch.cuda.manual_seed_all(seed)\n",
        "    torch.backends.cudnn.deterministic = True\n",
        "    torch.backends.cudnn.benchmark = False"
      ],
      "metadata": {
        "id": "Fbfejg3zNz9c",
        "outputId": "5b0228d2-fc3e-413a-da9f-b50c0fe523a0",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Descargado en: /kaggle/input/butterfly-dataset\n",
            "DATA_ROOT: /kaggle/input/butterfly-dataset/leedsbutterfly\n",
            "DIR: /kaggle/input/butterfly-dataset/leedsbutterfly\n",
            "DIR: /kaggle/input/butterfly-dataset/leedsbutterfly/images\n",
            "DIR: /kaggle/input/butterfly-dataset/leedsbutterfly/segmentations\n",
            "DIR: /kaggle/input/butterfly-dataset/leedsbutterfly/descriptions\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# ========================================================\n",
        "# 3. Dataset y transforms\n",
        "# ========================================================\n",
        "\n",
        "def list_png_labels(root: Path) -> Tuple[List[Tuple[str, int]], List[str]]:\n",
        "    paths = sorted([p for p in Path(root).iterdir() if p.is_file() and p.suffix.lower() == \".png\"])\n",
        "    prefixes = sorted({p.name[:3] for p in paths})\n",
        "    prefix_to_idx = {pref: i for i, pref in enumerate(prefixes)}\n",
        "    samples = [(str(p), prefix_to_idx[p.name[:3]]) for p in paths]\n",
        "    return samples, prefixes\n",
        "\n",
        "class FileListDataset(Dataset):\n",
        "    \"\"\"Dataset simple para (ruta, etiqueta) en carpeta plana.\"\"\"\n",
        "    def __init__(self, items: List[Tuple[str, int]], transform=None):\n",
        "        self.items = items\n",
        "        self.transform = transform\n",
        "    def __len__(self): return len(self.items)\n",
        "    def __getitem__(self, idx):\n",
        "        path, label = self.items[idx]\n",
        "        with PILImage.open(path) as img:\n",
        "            img = img.convert(\"RGB\")\n",
        "            if self.transform:\n",
        "                img = self.transform(img)\n",
        "        return img, label\n",
        "\n",
        "def build_transforms(img_size: int = 64,\n",
        "                     normalize: bool = True,\n",
        "                     augment: bool = True,\n",
        "                     for_mlp: bool = False):\n",
        "    norm = transforms.Normalize(mean=(0.485, 0.456, 0.406),\n",
        "                               std=(0.229, 0.224, 0.225)) if normalize else transforms.Lambda(lambda x: x)\n",
        "    aug = [transforms.RandomHorizontalFlip(p=0.5),\n",
        "           transforms.RandomRotation(degrees=10)] if augment else []\n",
        "    common = [transforms.Resize((img_size, img_size)), transforms.ToTensor(), norm]\n",
        "    if for_mlp:\n",
        "        common.append(transforms.Lambda(lambda t: t.view(-1)))  # aplanar a vector\n",
        "    train_tf = transforms.Compose(aug + common)\n",
        "    eval_tf  = transforms.Compose(common)\n",
        "    return train_tf, eval_tf, eval_tf\n",
        "\n",
        "# -------------------------\n",
        "# Prueba original vs transformada\n",
        "# -------------------------\n",
        "p = DATA_ROOT / \"images\" / \"0030060.png\"\n",
        "orig = PILImage.open(p).convert(\"RGB\")\n",
        "x = build_transforms(img_size=128, normalize=False, augment=True, for_mlp=False)[0](orig)\n",
        "plt.figure(figsize=(6,3))\n",
        "plt.subplot(1,2,1); plt.axis(\"off\"); plt.imshow(orig.resize((128,128)))\n",
        "plt.subplot(1,2,2); plt.axis(\"off\"); plt.imshow(x.permute(1,2,0).numpy())\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 248
        },
        "id": "fluY7mPanthD",
        "outputId": "30fc0961-4f19-4206-d461-bf4ef2d4a42b"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x300 with 2 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# ========================================================\n",
        "# 4. Modelos: MLP y CNN\n",
        "# ========================================================\n",
        "\n",
        "class MLP(nn.Module):\n",
        "    def __init__(self, input_dim: int, hidden_sizes: List[int],\n",
        "                 num_classes: int, activation: str = \"relu\",\n",
        "                 dropout: float = 0.0):\n",
        "        super().__init__()\n",
        "        act = {\"relu\": nn.ReLU, \"tanh\": nn.Tanh, \"sigmoid\": nn.Sigmoid}\n",
        "        if activation not in act: raise ValueError(f\"Unsupported activation: {activation}\")\n",
        "        Act = act[activation]\n",
        "        layers: List[nn.Module] = []\n",
        "        prev = input_dim\n",
        "        for h in hidden_sizes:\n",
        "            layers.extend([nn.Linear(prev, h), Act()])\n",
        "            if dropout > 0: layers.append(nn.Dropout(dropout))\n",
        "            prev = h\n",
        "        layers.append(nn.Linear(prev, num_classes))\n",
        "        self.net = nn.Sequential(*layers)\n",
        "    def forward(self, x): return self.net(x)\n",
        "\n",
        "class SimpleCNN(nn.Module):\n",
        "    \"\"\"Asume img_size=64 → tras dos MaxPool2d(2) queda 16x16.\"\"\"\n",
        "    def __init__(self, num_classes: int, in_channels: int = 3):\n",
        "        super().__init__()\n",
        "        self.features = nn.Sequential(\n",
        "            nn.Conv2d(in_channels, 32, 3, padding=1), nn.ReLU(), nn.MaxPool2d(2),\n",
        "            nn.Conv2d(32, 64, 3, padding=1),        nn.ReLU(), nn.MaxPool2d(2),\n",
        "        )\n",
        "        self.classifier = nn.Sequential(\n",
        "            nn.Flatten(),\n",
        "            nn.Linear(64 * 16 * 16, 128),\n",
        "            nn.ReLU(),\n",
        "            nn.Linear(128, num_classes),\n",
        "        )\n",
        "    def forward(self, x): return self.classifier(self.features(x))\n",
        "\n",
        "\n",
        "# -------------------------\n",
        "# Prueba mínima (misma imagen → shapes de logits)\n",
        "# -------------------------\n",
        "K = len(list_png_labels(DATA_ROOT / \"images\")[1])\n",
        "p = DATA_ROOT / \"images\" / \"0030060.png\"\n",
        "img = PILImage.open(p).convert(\"RGB\")\n",
        "# Vector para MLP\n",
        "x_vec_ = build_transforms(64, normalize=False, augment=False, for_mlp=True)[0](img)   # [3*64*64]\n",
        "print(\"x_vec shape:\", tuple(x_vec_.shape), \"| primeros 8:\", x_vec_[:8].tolist())\n",
        "# Tensor imagen para CNN\n",
        "x_img_ = build_transforms(64, normalize=False, augment=False, for_mlp=False)[0](img)  # [3,64,64]\n",
        "print(\"x_img shape:\", tuple(x_img_.shape),\n",
        "      \"| patch[ :,0:2,0:2 ]:\\n\", x_img_[:, :2, :2],\n",
        "      \"\\nmin/max/mean:\", float(x_img_.min()), float(x_img_.max()), float(x_img_.mean()))\n",
        "\n",
        "x_vec = x_vec_.unsqueeze(0)  # [1, 3*64*64]\n",
        "x_img = x_img_.unsqueeze(0)  # [1, 3, 64, 64]\n",
        "\n",
        "# ---------- Modelos ----------\n",
        "mlp = MLP(input_dim=x_vec.shape[1], hidden_sizes=[128, 64], num_classes=K)\n",
        "cnn = SimpleCNN(num_classes=K)\n",
        "mlp.eval(); cnn.eval()\n",
        "\n",
        "# ---------- Hooks ----------\n",
        "hooks = []\n",
        "def mk_hook(tag):\n",
        "    def _hook(m, inp, out):\n",
        "        t = out[0] if isinstance(out, (list, tuple)) else out\n",
        "        print(f\"[{tag}] shape={tuple(t.shape)} | mean={float(t.mean()):.4f} std={float(t.std()):.4f}\")\n",
        "    return _hook\n",
        "for i, m in enumerate(mlp.net):\n",
        "    hooks.append(m.register_forward_hook(mk_hook(f\"MLP {i}:{m.__class__.__name__}\")))\n",
        "for i, m in enumerate(cnn.features):\n",
        "    hooks.append(m.register_forward_hook(mk_hook(f\"CNN-feat {i}:{m.__class__.__name__}\")))\n",
        "for i, m in enumerate(cnn.classifier):\n",
        "    hooks.append(m.register_forward_hook(mk_hook(f\"CNN-cls {i}:{m.__class__.__name__}\")))\n",
        "# --------------------\n",
        "with torch.no_grad():\n",
        "    print(\"\\n>>> Forward MLP\")\n",
        "    y_mlp = mlp(x_vec)   # [1,K]\n",
        "    print(\"MLP logits:\", tuple(y_mlp.shape), \":\", y_mlp[0, :min(10, K)].tolist())\n",
        "    print(\"\\n>>> Forward CNN\")\n",
        "    y_cnn = cnn(x_img)   # [1,K]\n",
        "    print(\"CNN logits:\", tuple(y_cnn.shape), \":\", y_cnn[0, :min(10, K)].tolist())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "biMAPIZBo9bu",
        "outputId": "ebcd26ee-b634-4ae9-c8de-11ae807e4eb5"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "x_vec shape: (12288,) | primeros 8: [0.6274510025978088, 0.6274510025978088, 0.6117647290229797, 0.6000000238418579, 0.6000000238418579, 0.6000000238418579, 0.6000000238418579, 0.5882353186607361]\n",
            "x_img shape: (3, 64, 64) | patch[ :,0:2,0:2 ]:\n",
            " tensor([[[0.6275, 0.6275],\n",
            "         [0.6275, 0.6275]],\n",
            "\n",
            "        [[0.9412, 0.9412],\n",
            "         [0.9412, 0.9412]],\n",
            "\n",
            "        [[0.9373, 0.9373],\n",
            "         [0.9373, 0.9373]]]) \n",
            "min/max/mean: 0.0 1.0 0.5521376132965088\n",
            "\n",
            ">>> Forward MLP\n",
            "[MLP 0:Linear] shape=(1, 128) | mean=-0.0093 std=0.3852\n",
            "[MLP 1:ReLU] shape=(1, 128) | mean=0.1443 std=0.2126\n",
            "[MLP 2:Linear] shape=(1, 64) | mean=-0.0000 std=0.1780\n",
            "[MLP 3:ReLU] shape=(1, 64) | mean=0.0739 std=0.0976\n",
            "[MLP 4:Linear] shape=(1, 10) | mean=-0.0266 std=0.0706\n",
            "MLP logits: (1, 10) : [0.06866984814405441, 0.06328374147415161, 0.0060164183378219604, -0.022964568808674812, -0.12984594702720642, -0.04269465059041977, -0.04991923272609711, 0.0001535322517156601, -0.013224989175796509, -0.14587408304214478]\n",
            "\n",
            ">>> Forward CNN\n",
            "[CNN-feat 0:Conv2d] shape=(1, 32, 64, 64) | mean=-0.0338 std=0.3721\n",
            "[CNN-feat 1:ReLU] shape=(1, 32, 64, 64) | mean=0.1168 std=0.1755\n",
            "[CNN-feat 2:MaxPool2d] shape=(1, 32, 32, 32) | mean=0.1377 std=0.1882\n",
            "[CNN-feat 3:Conv2d] shape=(1, 64, 32, 32) | mean=0.0008 std=0.1480\n",
            "[CNN-feat 4:ReLU] shape=(1, 64, 32, 32) | mean=0.0574 std=0.0853\n",
            "[CNN-feat 5:MaxPool2d] shape=(1, 64, 16, 16) | mean=0.0739 std=0.0945\n",
            "[CNN-cls 0:Flatten] shape=(1, 16384) | mean=0.0739 std=0.0945\n",
            "[CNN-cls 1:Linear] shape=(1, 128) | mean=-0.0068 std=0.0659\n",
            "[CNN-cls 2:ReLU] shape=(1, 128) | mean=0.0238 std=0.0348\n",
            "[CNN-cls 3:Linear] shape=(1, 10) | mean=-0.0147 std=0.0673\n",
            "CNN logits: (1, 10) : [0.11004872620105743, -0.10899947583675385, -0.10014984756708145, -0.048905402421951294, -0.04805829003453255, 0.001415058970451355, 0.01520707830786705, -0.03785111382603645, 0.03750407695770264, 0.032997287809848785]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# ========================================================\n",
        "# 4. Entrenamiento / evaluación / métricas\n",
        "# ========================================================\n",
        "\n",
        "# -------------------------\n",
        "# compute_metrics — Métricas agregadas (accuracy, macro/weighted F1)\n",
        "# -------------------------\n",
        "def compute_metrics(y_true, y_pred) -> Dict[str, float]:\n",
        "    \"\"\"Devuelve métricas agregadas: accuracy, macro-precision/recall/F1, weighted-F1.\"\"\"\n",
        "    acc = accuracy_score(y_true, y_pred)\n",
        "    prec_m = precision_score(y_true, y_pred, average='macro', zero_division=0)\n",
        "    rec_m  = recall_score(y_true, y_pred, average='macro', zero_division=0)\n",
        "    f1_m   = f1_score(y_true, y_pred, average='macro', zero_division=0)\n",
        "    f1_w   = f1_score(y_true, y_pred, average='weighted', zero_division=0)\n",
        "    return {\"accuracy\": acc, \"precision_macro\": prec_m, \"recall_macro\": rec_m,\n",
        "            \"f1_macro\": f1_m, \"f1_weighted\": f1_w}\n",
        "\n",
        "# -------------------------\n",
        "# train_one_epoch — Entrenamiento de una época (loss y acc)\n",
        "# -------------------------\n",
        "def train_one_epoch(model, loader, criterion, optimizer, device):\n",
        "    \"\"\"Entrena 1 época y devuelve (loss_promedio, accuracy_promedio).\"\"\"\n",
        "    model.train()\n",
        "    total, correct, loss_sum = 0, 0, 0.0\n",
        "    for xb, yb in loader:\n",
        "        xb, yb = xb.to(device), yb.to(device)\n",
        "        optimizer.zero_grad(set_to_none=True)\n",
        "        logits = model(xb)\n",
        "        loss = criterion(logits, yb)\n",
        "        loss.backward(); optimizer.step()\n",
        "        loss_sum += loss.item() * xb.size(0)\n",
        "        correct += (logits.argmax(1) == yb).sum().item()\n",
        "        total += xb.size(0)\n",
        "    return loss_sum / total, correct / total\n",
        "\n",
        "# -------------------------\n",
        "# evaluate — Evaluación (loss, acc y vectores y_true/y_pred)\n",
        "# -------------------------\n",
        "@torch.no_grad()\n",
        "def evaluate(model, loader, criterion, device):\n",
        "    \"\"\"Evalúa y devuelve (loss_prom, acc_prom, y_true, y_pred).\"\"\"\n",
        "    model.eval()\n",
        "    total, correct, loss_sum = 0, 0, 0.0\n",
        "    y_true, y_pred = [], []\n",
        "    for xb, yb in loader:\n",
        "        xb, yb = xb.to(device), yb.to(device)\n",
        "        logits = model(xb)\n",
        "        loss = criterion(logits, yb)\n",
        "        loss_sum += loss.item() * xb.size(0)\n",
        "        preds = logits.argmax(1)\n",
        "        correct += (preds == yb).sum().item()\n",
        "        total += xb.size(0)\n",
        "        y_true.extend(yb.tolist()); y_pred.extend(preds.tolist())\n",
        "    return loss_sum / total, correct / total, np.array(y_true), np.array(y_pred)\n",
        "\n",
        "# -------------------------\n",
        "# plot_curves — Guardar curvas de pérdida y accuracy\n",
        "# -------------------------\n",
        "def plot_curves(history: Dict[str, List[float]], title: str, out_png: Path):\n",
        "    \"\"\"Guarda dos PNG: curvas de pérdida y de accuracy por época.\"\"\"\n",
        "    base = Path(out_png); base.parent.mkdir(parents=True, exist_ok=True)\n",
        "    loss_path = base.with_name(f\"{base.stem}_loss.png\")\n",
        "    acc_path  = base.with_name(f\"{base.stem}_acc.png\")\n",
        "    epochs = range(1, len(history[\"train_loss\"]) + 1)\n",
        "\n",
        "    plt.figure(figsize=(6,4))\n",
        "    plt.plot(epochs, history[\"train_loss\"], label=\"Train Loss\")\n",
        "    plt.plot(epochs, history[\"val_loss\"],   label=\"Val Loss\")\n",
        "    plt.xlabel(\"Epoch\"); plt.ylabel(\"Loss\"); plt.title(f\"{title} - Loss\")\n",
        "    plt.legend(); plt.tight_layout(); plt.savefig(loss_path, dpi=150); plt.close()\n",
        "\n",
        "    plt.figure(figsize=(6,4))\n",
        "    plt.plot(epochs, history[\"train_acc\"], label=\"Train Acc\")\n",
        "    plt.plot(epochs, history[\"val_acc\"],   label=\"Val Acc\")\n",
        "    plt.xlabel(\"Epoch\"); plt.ylabel(\"Accuracy\"); plt.title(f\"{title} - Accuracy\")\n",
        "    plt.legend(); plt.tight_layout(); plt.savefig(acc_path, dpi=150); plt.close()\n",
        "\n",
        "# -------------------------\n",
        "# save_confusion_matrix — (impresión) Matriz de confusión en tabla (sin gráfico)\n",
        "# -------------------------\n",
        "\n",
        "def print_confusion_matrix(y_true, y_pred, class_names, title: str, out_png: Optional[Path] = None):\n",
        "    cm = confusion_matrix(y_true, y_pred, labels=list(range(len(class_names))))\n",
        "    df = pd.DataFrame(cm, index=[f\"true_{c}\" for c in class_names],\n",
        "                         columns=[f\"pred_{c}\" for c in class_names])\n",
        "    print(f\"\\n{title} — Matriz de confusión\")\n",
        "    print(df.to_string())\n",
        "    return cm, df"
      ],
      "metadata": {
        "id": "-z-io7RjvzyD"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# ========================================================\n",
        "# 5. Runner de entrenamiento /  (con PCA )\n",
        "# ========================================================\n",
        "def run_experiment(\n",
        "    data_root: Path, img_size: int, batch_size: int, epochs: int,\n",
        "    lr: float, optimizer_name: str, augment: bool, activation: str,\n",
        "    hidden_sizes: List[int], dropout: float, model_type: str,\n",
        "    num_workers: int, seed: int, device_str: str = None,\n",
        "    save_artifacts: bool = False,          # (igual que antes)\n",
        "    # --- NUEVO: flags para PCA en MLP ---\n",
        "    use_pca: bool = False,\n",
        "    pca_var: float = 0.90,\n",
        "    pca_whiten: bool = False\n",
        "):\n",
        "    \"\"\"\n",
        "    Si model_type=='mlp' y use_pca=True:\n",
        "      - Se vectoriza cada imagen (64x64x3 normalizada), se apila en matrices,\n",
        "      - Se ajusta PCA con n_components=pca_var (proporción de var. explicada),\n",
        "      - Se entrenan DataLoaders con TensorDataset de features PCA.\n",
        "    Nota: en el camino PCA se ignora 'augment' (PCA se ajusta sobre datos normalizados, no aumentados).\n",
        "    \"\"\"\n",
        "    from sklearn.decomposition import PCA\n",
        "\n",
        "    set_seed(seed)\n",
        "    device = torch.device(device_str) if device_str else torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
        "    pin = (device.type == \"cuda\")\n",
        "    print(f\"[Device] {device} | CUDA avail={torch.cuda.is_available()}\")\n",
        "\n",
        "    # Datos (asumimos .../images)\n",
        "    root_images = Path(data_root) / \"images\"\n",
        "    samples, class_names = list_png_labels(root_images)\n",
        "    num_classes = len(class_names)\n",
        "    print(f\"[Data] imgs={len(samples)} | clases={num_classes} | img_size={img_size} | augment={augment} | use_pca={use_pca}\")\n",
        "\n",
        "    # Split 80/10/10\n",
        "    paths  = [p for p, y in samples]\n",
        "    labels = [y for _, y in samples]\n",
        "    tr_paths, tmp_paths, tr_y, tmp_y = train_test_split(paths, labels, test_size=0.2, random_state=seed, stratify=labels)\n",
        "    va_paths, te_paths, va_y, te_y   = train_test_split(tmp_paths, tmp_y, test_size=0.5, random_state=seed, stratify=tmp_y)\n",
        "    print(f\"[Split] train={len(tr_paths)} | val={len(va_paths)} | test={len(te_paths)} | batch_size={batch_size}\")\n",
        "\n",
        "    # ===========================\n",
        "    # Transforms / Datasets\n",
        "    # ===========================\n",
        "    if model_type.lower() == \"mlp\":\n",
        "        if use_pca:\n",
        "            # --- Vectorización fija + normalización (sin augment) ---\n",
        "            to_vec = transforms.Compose([\n",
        "                transforms.Resize((img_size, img_size)),\n",
        "                transforms.ToTensor(),\n",
        "                transforms.Normalize(mean=(0.485,0.456,0.406), std=(0.229,0.224,0.225)),\n",
        "                transforms.Lambda(lambda t: t.view(-1))\n",
        "            ])\n",
        "            def load_matrix(pths):\n",
        "                X = np.stack([to_vec(PILImage.open(p).convert(\"RGB\")).numpy() for p in pths], axis=0)\n",
        "                return X\n",
        "\n",
        "            Xtr = load_matrix(tr_paths); ytr = np.array(tr_y)\n",
        "            Xva = load_matrix(va_paths); yva = np.array(va_y)\n",
        "            Xte = load_matrix(te_paths); yte = np.array(te_y)\n",
        "\n",
        "            pca = PCA(n_components=pca_var, svd_solver=\"full\", whiten=pca_whiten, random_state=seed)\n",
        "            Xtr = pca.fit_transform(Xtr); Xva = pca.transform(Xva); Xte = pca.transform(Xte)\n",
        "\n",
        "            input_dim = Xtr.shape[1]\n",
        "            print(f\"[PCA] var_exp≈{pca.explained_variance_ratio_.sum():.4f} | dim: {3*img_size*img_size} → {input_dim} \"\n",
        "                  f\"| whiten={pca_whiten}\")\n",
        "\n",
        "            ds_tr = torch.utils.data.TensorDataset(torch.from_numpy(Xtr).float(), torch.from_numpy(ytr).long())\n",
        "            ds_va = torch.utils.data.TensorDataset(torch.from_numpy(Xva).float(), torch.from_numpy(yva).long())\n",
        "            ds_te = torch.utils.data.TensorDataset(torch.from_numpy(Xte).float(), torch.from_numpy(yte).long())\n",
        "\n",
        "            dl_tr = DataLoader(ds_tr, batch_size=batch_size, shuffle=True,  num_workers=num_workers, pin_memory=pin)\n",
        "            dl_va = DataLoader(ds_va, batch_size=batch_size, shuffle=False, num_workers=num_workers, pin_memory=pin)\n",
        "            dl_te = DataLoader(ds_te, batch_size=batch_size, shuffle=False, num_workers=num_workers, pin_memory=pin)\n",
        "\n",
        "        else:\n",
        "            # --- Camino original (sin PCA) ---\n",
        "            tf_tr, tf_va, tf_te = build_transforms(img_size, normalize=True, augment=augment, for_mlp=True)\n",
        "            input_dim = 3 * img_size * img_size\n",
        "            ds_tr = FileListDataset(list(zip(tr_paths, tr_y)), transform=tf_tr)\n",
        "            ds_va = FileListDataset(list(zip(va_paths, va_y)), transform=tf_va)\n",
        "            ds_te = FileListDataset(list(zip(te_paths, te_y)), transform=tf_te)\n",
        "            dl_tr = DataLoader(ds_tr, batch_size=batch_size, shuffle=True,  num_workers=num_workers, pin_memory=pin)\n",
        "            dl_va = DataLoader(ds_va, batch_size=batch_size, shuffle=False, num_workers=num_workers, pin_memory=pin)\n",
        "            dl_te = DataLoader(ds_te, batch_size=batch_size, shuffle=False, num_workers=num_workers, pin_memory=pin)\n",
        "\n",
        "    else:\n",
        "        # CNN: flujo original\n",
        "        tf_tr, tf_va, tf_te = build_transforms(img_size, normalize=True, augment=augment, for_mlp=False)\n",
        "        ds_tr = FileListDataset(list(zip(tr_paths, tr_y)), transform=tf_tr)\n",
        "        ds_va = FileListDataset(list(zip(va_paths, va_y)), transform=tf_va)\n",
        "        ds_te = FileListDataset(list(zip(te_paths, te_y)), transform=tf_te)\n",
        "        dl_tr = DataLoader(ds_tr, batch_size=batch_size, shuffle=True,  num_workers=num_workers, pin_memory=pin)\n",
        "        dl_va = DataLoader(ds_va, batch_size=batch_size, shuffle=False, num_workers=num_workers, pin_memory=pin)\n",
        "        dl_te = DataLoader(ds_te, batch_size=batch_size, shuffle=False, num_workers=num_workers, pin_memory=pin)\n",
        "\n",
        "    # ===========================\n",
        "    # Modelo\n",
        "    # ===========================\n",
        "    if model_type.lower() == \"mlp\":\n",
        "        model = MLP(\n",
        "            input_dim=input_dim,\n",
        "            hidden_sizes=hidden_sizes if hidden_sizes else [1024, 512],\n",
        "            num_classes=num_classes,\n",
        "            activation=activation,\n",
        "            dropout=dropout\n",
        "        )\n",
        "        pca_tag = (f\"_PCA{int(round(pca_var*100))}\" + (\"W\" if pca_whiten else \"\")) if use_pca else \"\"\n",
        "        title = f\"MLP_{activation}_hs{hidden_sizes if hidden_sizes else [1024,512]}_do{dropout}{pca_tag}\"\n",
        "        act_desc = activation\n",
        "    else:\n",
        "        model = SimpleCNN(num_classes=num_classes)\n",
        "        title = \"SimpleCNN\"\n",
        "        act_desc = \"ReLU(fija)\"\n",
        "    model = model.to(device)\n",
        "\n",
        "    # ===========================\n",
        "    # Loss & Optimizer\n",
        "    # ===========================\n",
        "    criterion = nn.CrossEntropyLoss()\n",
        "    opt_name = optimizer_name.lower()\n",
        "    if opt_name == \"adam\":\n",
        "        optimizer = torch.optim.Adam(model.parameters(), lr=lr)\n",
        "        opt_desc = f\"Adam(lr={lr})\"\n",
        "    elif opt_name == \"sgd\":\n",
        "        optimizer = torch.optim.SGD(model.parameters(), lr=lr, momentum=0.9)\n",
        "        opt_desc = f\"SGD(lr={lr}, momentum=0.9)\"\n",
        "    else:\n",
        "        raise ValueError(\"optimizer must be 'adam' or 'sgd'\")\n",
        "    print(f\"[Model] {title} | optimizer={opt_desc} | dropout={dropout} | activation={act_desc}\")\n",
        "\n",
        "    # ===========================\n",
        "    # Entrenamiento\n",
        "    # ===========================\n",
        "    history = {\"train_loss\": [], \"val_loss\": [], \"train_acc\": [], \"val_acc\": []}\n",
        "    best_val_f1, best_state = -1.0, None\n",
        "    t0 = time.perf_counter()\n",
        "    for epoch in range(1, epochs + 1):\n",
        "        tr_loss, tr_acc = train_one_epoch(model, dl_tr, criterion, optimizer, device)\n",
        "        va_loss, va_acc, y_val, p_val = evaluate(model, dl_va, criterion, device)\n",
        "        f1_m = f1_score(y_val, p_val, average='macro', zero_division=0)\n",
        "\n",
        "        history[\"train_loss\"].append(tr_loss); history[\"val_loss\"].append(va_loss)\n",
        "        history[\"train_acc\"].append(tr_acc);   history[\"val_acc\"].append(va_acc)\n",
        "\n",
        "        if f1_m > best_val_f1:\n",
        "            best_val_f1 = f1_m\n",
        "            best_state = {k: v.detach().cpu().clone() for k, v in model.state_dict().items()}\n",
        "\n",
        "        print(f\"[{title}] Ep {epoch:02d}/{epochs} | Train loss {tr_loss:.4f} acc {tr_acc:.3f} | \"\n",
        "              f\"Val loss {va_loss:.4f} acc {va_acc:.3f} F1(macro) {f1_m:.3f}\")\n",
        "\n",
        "    elapsed = (time.perf_counter() - t0) / max(1, epochs)\n",
        "    print(f\"[Tiempo] ~{elapsed:.2f}s/epoch | best Val F1(macro)={best_val_f1:.3f}\")\n",
        "\n",
        "    # ===========================\n",
        "    # Test (mejor estado)\n",
        "    # ===========================\n",
        "    if best_state is not None:\n",
        "        model.load_state_dict(best_state)\n",
        "    _, _, y_test, p_test = evaluate(model, dl_te, criterion, device)\n",
        "    test_metrics = compute_metrics(y_test, p_test)\n",
        "    print(f\"[Test] acc={test_metrics['accuracy']:.3f} | F1(macro)={test_metrics['f1_macro']:.3f} | F1(weighted)={test_metrics['f1_weighted']:.3f}\")\n",
        "\n",
        "    # Matrices y reporte\n",
        "    print_confusion_matrix(y_test, p_test, class_names, f\"{title} - Confusion Matrix\")\n",
        "    print(\"\\n[Classification report]\")\n",
        "    print(classification_report(\n",
        "        y_test, p_test, labels=list(range(num_classes)),\n",
        "        target_names=class_names, digits=3, zero_division=0\n",
        "    ))\n",
        "\n",
        "    # ===========================\n",
        "    # Guardados opcionales\n",
        "    # ===========================\n",
        "    if save_artifacts:\n",
        "        out_dir = Path(\"outputs\"); out_dir.mkdir(parents=True, exist_ok=True)\n",
        "        plot_curves(history, title, out_dir / f\"{title}.png\")\n",
        "\n",
        "        report_dict = classification_report(\n",
        "            y_test, p_test,\n",
        "            labels=list(range(num_classes)),\n",
        "            target_names=class_names,\n",
        "            output_dict=True, zero_division=0\n",
        "        )\n",
        "        pd.DataFrame(report_dict).to_csv(out_dir / f\"{title}_classification_report.csv\", index=True)\n",
        "\n",
        "        cm = confusion_matrix(y_test, p_test, labels=list(range(num_classes)))\n",
        "        df_cm = pd.DataFrame(cm,\n",
        "                              index=[f\"true_{c}\" for c in class_names],\n",
        "                              columns=[f\"pred_{c}\" for c in class_names])\n",
        "        df_cm.to_csv(out_dir / f\"{title}_confusion_matrix.csv\")\n",
        "\n",
        "        cm_norm = (cm / cm.sum(axis=1, keepdims=True)).round(6)\n",
        "        df_cm_norm = pd.DataFrame(cm_norm,\n",
        "                                  index=[f\"true_{c}\" for c in class_names],\n",
        "                                  columns=[f\"pred_{c}\" for c in class_names])\n",
        "        df_cm_norm.to_csv(out_dir / f\"{title}_confusion_matrix_norm.csv\")\n",
        "\n",
        "    return {\n",
        "        \"model_type\": model_type,\n",
        "        \"model\": title,\n",
        "        \"optimizer\": optimizer.__class__.__name__,\n",
        "        \"lr\": lr,\n",
        "        \"dropout\": dropout if model_type.lower()==\"mlp\" else None,\n",
        "        \"activation\": activation if model_type.lower()==\"mlp\" else \"relu\",\n",
        "        \"img_size\": img_size,\n",
        "        \"batch_size\": batch_size,\n",
        "        \"epochs\": epochs,\n",
        "        \"time_per_epoch_sec\": elapsed,\n",
        "        \"n_train\": len(tr_paths), \"n_val\": len(va_paths), \"n_test\": len(te_paths),\n",
        "        \"accuracy\": test_metrics[\"accuracy\"],\n",
        "        \"precision_macro\": test_metrics[\"precision_macro\"],\n",
        "        \"recall_macro\": test_metrics[\"recall_macro\"],\n",
        "        \"f1_macro\": test_metrics[\"f1_macro\"],\n",
        "        \"f1_weighted\": test_metrics[\"f1_weighted\"],\n",
        "        \"classes\": class_names,\n",
        "        # --- NUEVO: registro de PCA ---\n",
        "        \"use_pca\": use_pca if model_type.lower()==\"mlp\" else False,\n",
        "        \"pca_var\": pca_var if (model_type.lower()==\"mlp\" and use_pca) else None,\n",
        "        \"pca_whiten\": pca_whiten if (model_type.lower()==\"mlp\" and use_pca) else None,\n",
        "    }\n"
      ],
      "metadata": {
        "id": "7oiQyT7Kcc1g"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# ========================================================\n",
        "# 6. Grid search (inteligente) + resumen de resultados\n",
        "# ========================================================\n",
        "from itertools import product\n",
        "import time, numpy as np\n",
        "import pandas as pd\n",
        "\n",
        "# ----- Espacio de búsqueda MLP (PCA=True, más amplio e inteligente) -----\n",
        "mlp_space = {\n",
        "    \"model_type\":     [\"mlp\"],\n",
        "    \"img_size\":       [64],\n",
        "    \"batch_size\":     [128, 8, 16],             # añadimos 64 para estabilidad con LR altos\n",
        "    \"epochs\":         [30],\n",
        "    \"optimizer_name\": [\"adam\", \"sgd\"],\n",
        "    # rangos más amplios\n",
        "    \"lr_adam\":        [5e-3, 3e-4, 1e-4],\n",
        "    \"lr_sgd\":         [1e-2, 1e-3],\n",
        "    \"augment\":        [True],                   # (ignorado cuando use_pca=True)\n",
        "    \"activation\":     [\"relu\", \"tanh\", \"sigmoid\"],\n",
        "    # más opciones, recordando que con PCA la entrada es más chica\n",
        "    \"hidden_sizes\":   [[512, 256], [256, 128], [1024, 512], [64, 32]],\n",
        "    \"dropout\":        [0.5, 0.1, 0.3],          # la lógica inteligente filtrará según tamaño de red\n",
        "    # --- PCA fijo en True, y exploramos varianza/whiten ---\n",
        "    \"use_pca\":        [True],\n",
        "    \"pca_var\":        [0.95],\n",
        "    \"pca_whiten\":     [False, True],\n",
        "}\n",
        "\n",
        "# ----- Espacio de búsqueda CNN (igual que antes, sin PCA externo) -----\n",
        "cnn_space = {\n",
        "    \"model_type\":     [\"cnn\"],\n",
        "    \"img_size\":       [64],                     # SimpleCNN asume 64x64\n",
        "    \"batch_size\":     [32, 16],\n",
        "    \"epochs\":         [30],\n",
        "    \"optimizer_name\": [\"adam\", \"sgd\"],\n",
        "    \"lr_adam\":        [1e-3, 3e-4, 1e-2],       # considera quitar 1e-2 si ves inestabilidad\n",
        "    \"lr_sgd\":         [1e-2, 3e-3],\n",
        "    \"augment\":        [True, False],\n",
        "    \"activation\":     [\"relu\"],                 # ignorado en CNN actual\n",
        "    \"hidden_sizes\":   [[]],                     # ignorado\n",
        "    \"dropout\":        [0.0],                    # ignorado\n",
        "}\n",
        "\n",
        "# ----------------- Utilidades de heurística -----------------\n",
        "def _is_large(hs):   return hs in ([512, 256], [256, 128])\n",
        "def _is_small(hs):   return hs in ([96, 48], [64, 32])\n",
        "\n",
        "def _allowed_dropouts(hs, pca_var, pca_whiten):\n",
        "    # Redes grandes: más regularización\n",
        "    if _is_large(hs):\n",
        "        return [0.2, 0.4]\n",
        "    # Varianza muy baja (0.85) sin whiten → evitar 0.0 por posible sobreajuste\n",
        "    if (pca_var <= 0.85 + 1e-9) and (not pca_whiten):\n",
        "        return [0.2, 0.4]\n",
        "    # En el resto: 0.0 y 0.2 son razonables\n",
        "    return [0.0, 0.2]\n",
        "\n",
        "def _lr_candidates(opt, hs, act, bs, base_lrs_adam, base_lrs_sgd):\n",
        "    if opt == \"adam\":\n",
        "        lrs = list(base_lrs_adam)  # [1e-3, 5e-4, 3e-4, 1e-4]\n",
        "        # Tanh/Sigmoid saturan con LR grande → recortar\n",
        "        if act in (\"tanh\", \"sigmoid\"):\n",
        "            lrs = [lr for lr in lrs if lr <= 5e-4]\n",
        "        # Redes muy grandes con Adam: evitar 1e-3 si batch muy chico\n",
        "        if _is_large(hs) and bs == 16:\n",
        "            lrs = [lr for lr in lrs if lr <= 5e-4]\n",
        "        return lrs\n",
        "    else:  # sgd\n",
        "        lrs = list(base_lrs_sgd)   # [1e-2, 3e-3, 1e-3]\n",
        "        # Solo ReLU con LR altos de SGD\n",
        "        if act in (\"tanh\", \"sigmoid\"):\n",
        "            lrs = [lr for lr in lrs if lr <= 3e-3]\n",
        "        # Batch 16 con SGD no va bien con 1e-2\n",
        "        if bs == 16:\n",
        "            lrs = [lr for lr in lrs if lr < 1e-2]\n",
        "        # Redes grandes con SGD: evita 1e-2\n",
        "        if _is_large(hs):\n",
        "            lrs = [lr for lr in lrs if lr <= 3e-3]\n",
        "        return lrs\n",
        "\n",
        "# ----------------- Generadores de combinaciones -----------------\n",
        "def iter_space_with_lrs(space):\n",
        "    \"\"\"Versión simple (para CNN) que solo inserta LR según optimizador.\"\"\"\n",
        "    keys_base = [k for k in space.keys() if k not in (\"lr_adam\", \"lr_sgd\")]\n",
        "    values_base = [space[k] for k in keys_base]\n",
        "    for vals in product(*values_base):\n",
        "        cfg = dict(zip(keys_base, vals))\n",
        "        lrs = space[\"lr_adam\"] if cfg[\"optimizer_name\"].lower() == \"adam\" else space[\"lr_sgd\"]\n",
        "        for lr in lrs:\n",
        "            yield {**cfg, \"lr\": lr}\n",
        "\n",
        "def iter_space_smart(space):\n",
        "    \"\"\"\n",
        "    Genera combinaciones 'inteligentes' para MLP+PCA aplicando reglas:\n",
        "    - Dropout según tamaño de red y configuración PCA.\n",
        "    - Recorte de LR según activación, tamaño de red y batch size.\n",
        "    - Evita combinaciones inestables/ineficientes.\n",
        "    \"\"\"\n",
        "    keys_base = [k for k in space.keys() if k not in (\"lr_adam\", \"lr_sgd\", \"dropout\")]\n",
        "    values_base = [space[k] for k in keys_base]\n",
        "    for vals in product(*values_base):\n",
        "        cfg = dict(zip(keys_base, vals))\n",
        "\n",
        "        # Alias\n",
        "        opt = cfg[\"optimizer_name\"].lower()\n",
        "        act = cfg[\"activation\"].lower()\n",
        "        hs  = cfg[\"hidden_sizes\"]\n",
        "        bs  = cfg[\"batch_size\"]\n",
        "        pv  = cfg[\"pca_var\"]\n",
        "        pw  = cfg[\"pca_whiten\"]\n",
        "\n",
        "        # Dropouts permitidos según heurística\n",
        "        dropouts = _allowed_dropouts(hs, pv, pw)\n",
        "\n",
        "        # LR candidatos según heurística\n",
        "        lrs = _lr_candidates(opt, hs, act, bs, space[\"lr_adam\"], space[\"lr_sgd\"])\n",
        "        if not lrs:\n",
        "            continue  # no quedan LRs válidos para este sub-espacio\n",
        "\n",
        "        # (Opcional) otra poda leve:\n",
        "        # Si activación es 'sigmoid' y hs muy pequeño, favorece LRs menores\n",
        "        if act == \"sigmoid\" and _is_small(hs):\n",
        "            lrs = [lr for lr in lrs if lr <= (5e-4 if opt==\"adam\" else 3e-3)]\n",
        "            if not lrs:\n",
        "                continue\n",
        "\n",
        "        for do in dropouts:\n",
        "            for lr in lrs:\n",
        "                yield {**cfg, \"dropout\": do, \"lr\": lr}\n",
        "\n",
        "def count_space_smart(space):\n",
        "    return sum(1 for _ in iter_space_smart(space))\n",
        "\n",
        "def count_space_with_lrs(space):\n",
        "    keys_base = [k for k in space.keys() if k not in (\"lr_adam\", \"lr_sgd\")]\n",
        "    total = 0\n",
        "    for vals in product(*[space[k] for k in keys_base]):\n",
        "        cfg = dict(zip(keys_base, vals))\n",
        "        total += len(space[\"lr_adam\"]) if cfg[\"optimizer_name\"].lower()==\"adam\" else len(space[\"lr_sgd\"])\n",
        "    return total\n",
        "\n",
        "print(\"Combos MLP (inteligentes):\", count_space_smart(mlp_space))\n",
        "print(\"Combos CNN:\", count_space_with_lrs(cnn_space))\n",
        "print(\"Total combos (aprox):\", count_space_smart(mlp_space) + count_space_with_lrs(cnn_space))\n",
        "\n",
        "results = []\n",
        "\n",
        "def run_cfg(cfg, save_artifacts=False):\n",
        "    print(\"\\n\" + \"=\"*72)\n",
        "    print(f\"RUN | model={cfg['model_type']} | img={cfg['img_size']} | bs={cfg['batch_size']} \"\n",
        "          f\"| epochs={cfg['epochs']} | opt={cfg['optimizer_name']} | lr={cfg['lr']} \"\n",
        "          f\"| aug={cfg['augment']} | act={cfg['activation']} | hs={cfg['hidden_sizes']} | do={cfg['dropout']} \"\n",
        "          f\"| use_pca={cfg.get('use_pca', False)} | pca_var={cfg.get('pca_var', None)} | whiten={cfg.get('pca_whiten', None)}\")\n",
        "    print(\"=\"*72)\n",
        "\n",
        "    t0 = time.time()\n",
        "    summary = run_experiment(\n",
        "        data_root=Path(DATA_ROOT),\n",
        "        img_size=cfg[\"img_size\"],\n",
        "        batch_size=cfg[\"batch_size\"],\n",
        "        epochs=cfg[\"epochs\"],\n",
        "        lr=cfg[\"lr\"],\n",
        "        optimizer_name=cfg[\"optimizer_name\"],\n",
        "        augment=cfg[\"augment\"],\n",
        "        activation=cfg[\"activation\"],\n",
        "        hidden_sizes=cfg[\"hidden_sizes\"],\n",
        "        dropout=cfg[\"dropout\"],\n",
        "        model_type=cfg[\"model_type\"],\n",
        "        num_workers=0,\n",
        "        seed=42,\n",
        "        device_str=\"cpu\",\n",
        "        save_artifacts=save_artifacts,\n",
        "        # PCA flags (en MLP ya están siempre en True en este espacio)\n",
        "        use_pca=cfg.get(\"use_pca\", False),\n",
        "        pca_var=cfg.get(\"pca_var\", 0.90),\n",
        "        pca_whiten=cfg.get(\"pca_whiten\", False)\n",
        "    )\n",
        "    wall = time.time() - t0\n",
        "    return {\n",
        "        **summary,\n",
        "        \"epochs\": cfg[\"epochs\"],\n",
        "        \"augment\": cfg[\"augment\"],\n",
        "        \"activation\": cfg[\"activation\"],\n",
        "        \"hidden_sizes\": cfg[\"hidden_sizes\"],\n",
        "        \"dropout\": cfg[\"dropout\"],\n",
        "        \"use_pca\": cfg.get(\"use_pca\", False),\n",
        "        \"pca_var\": cfg.get(\"pca_var\", None),\n",
        "        \"pca_whiten\": cfg.get(\"pca_whiten\", None),\n",
        "        \"wall_time_sec\": round(wall, 2),\n",
        "    }\n",
        "\n",
        "# ----- Ejecutar grid -----\n",
        "for cfg in iter_space_smart(mlp_space):\n",
        "    results.append(run_cfg(cfg, save_artifacts=False))\n",
        "\n",
        "for cfg in iter_space_with_lrs(cnn_space):\n",
        "    results.append(run_cfg(cfg, save_artifacts=False))\n",
        "\n",
        "df_results = pd.DataFrame(results)\n",
        "\n",
        "# ----- Vista compacta -----\n",
        "cols_view = [\n",
        "    \"model_type\",\"model\",\"accuracy\",\"precision_macro\",\"recall_macro\",\"f1_macro\",\"f1_weighted\",\n",
        "    \"time_per_epoch_sec\",\"wall_time_sec\",\"img_size\",\"batch_size\",\"optimizer\",\"lr\",\"augment\",\n",
        "    \"activation\",\"hidden_sizes\",\"dropout\",\"epochs\",\n",
        "    \"use_pca\",\"pca_var\",\"pca_whiten\"\n",
        "]\n",
        "display(df_results[cols_view].sort_values([\"model_type\",\"f1_macro\"], ascending=[True, False]))\n",
        "\n",
        "# ----- Elegir el mejor por tipo (f1_macro) -----\n",
        "best_idx_mlp = df_results[df_results[\"model_type\"]==\"mlp\"][\"f1_macro\"].idxmax()\n",
        "best_idx_cnn = df_results[df_results[\"model_type\"]==\"cnn\"][\"f1_macro\"].idxmax()\n",
        "best_mlp = df_results.loc[best_idx_mlp].to_dict()\n",
        "best_cnn = df_results.loc[best_idx_cnn].to_dict()\n",
        "\n",
        "print(\"\\n[Mejor MLP] ->\", best_mlp[\"model\"], \"| f1_macro=\", round(best_mlp[\"f1_macro\"],3))\n",
        "print(\"[Mejor CNN] ->\", best_cnn[\"model\"], \"| f1_macro=\", round(best_cnn[\"f1_macro\"],3))\n",
        "\n",
        "# ----- Re-ejecutar mejores con artefactos (curvas + report CSV) -----\n",
        "print(\"\\nRe-ejecutando mejores con save_artifacts=True (para la celda de visualización)...\")\n",
        "\n",
        "best_mlp_cfg = {\n",
        "    \"model_type\": \"mlp\",\n",
        "    \"img_size\":   int(best_mlp[\"img_size\"]),\n",
        "    \"batch_size\": int(best_mlp[\"batch_size\"]),\n",
        "    \"epochs\":     int(best_mlp[\"epochs\"]),\n",
        "    \"lr\":         float(best_mlp[\"lr\"]),\n",
        "    \"optimizer_name\": best_mlp[\"optimizer\"],\n",
        "    \"augment\":    bool(best_mlp[\"augment\"]),\n",
        "    \"activation\": best_mlp[\"activation\"],\n",
        "    \"hidden_sizes\": best_mlp[\"hidden_sizes\"],\n",
        "    \"dropout\":    float(best_mlp[\"dropout\"]) if best_mlp[\"dropout\"] is not None else 0.0,\n",
        "    \"use_pca\":    bool(best_mlp.get(\"use_pca\", False)),\n",
        "    \"pca_var\":    float(best_mlp[\"pca_var\"]) if best_mlp.get(\"pca_var\") is not None else 0.90,\n",
        "    \"pca_whiten\": bool(best_mlp.get(\"pca_whiten\", False)),\n",
        "}\n",
        "best_cnn_cfg = {\n",
        "    \"model_type\": \"cnn\",\n",
        "    \"img_size\":   int(best_cnn[\"img_size\"]),\n",
        "    \"batch_size\": int(best_cnn[\"batch_size\"]),\n",
        "    \"epochs\":     int(best_cnn[\"epochs\"]),\n",
        "    \"lr\":         float(best_cnn[\"lr\"]),\n",
        "    \"optimizer_name\": best_cnn[\"optimizer\"],\n",
        "    \"augment\":    bool(best_cnn[\"augment\"]),\n",
        "    \"activation\": \"relu\",\n",
        "    \"hidden_sizes\": [],\n",
        "    \"dropout\":    0.0,\n",
        "}\n",
        "\n",
        "best_mlp_summary = run_cfg(best_mlp_cfg, save_artifacts=True)\n",
        "best_cnn_summary = run_cfg(best_cnn_cfg, save_artifacts=True)\n",
        "\n",
        "best_title_mlp = best_mlp_summary[\"model\"]\n",
        "best_title_cnn = best_cnn_summary[\"model\"]\n",
        "print(\"\\n[Prefijos guardados] best_title_mlp =\", best_title_mlp, \"| best_title_cnn =\", best_title_cnn)\n"
      ],
      "metadata": {
        "id": "3LtdfvMViB2i",
        "outputId": "5292a1d6-b3e3-4ff7-cb3c-ca4368ec801d",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Combos MLP (inteligentes): 488\n",
            "Combos CNN: 20\n",
            "Total combos (aprox): 508\n",
            "\n",
            "========================================================================\n",
            "RUN | model=mlp | img=64 | bs=128 | epochs=30 | opt=adam | lr=0.005 | aug=True | act=relu | hs=[512, 256] | do=0.2 | use_pca=True | pca_var=0.95 | whiten=False\n",
            "========================================================================\n",
            "[Device] cpu | CUDA avail=False\n",
            "[Data] imgs=832 | clases=10 | img_size=64 | augment=True | use_pca=True\n",
            "[Split] train=665 | val=83 | test=84 | batch_size=128\n",
            "[PCA] var_exp≈0.9502 | dim: 12288 → 315 | whiten=False\n",
            "[Model] MLP_relu_hs[512, 256]_do0.2_PCA95 | optimizer=Adam(lr=0.005) | dropout=0.2 | activation=relu\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 01/30 | Train loss 2.9324 acc 0.202 | Val loss 1.7056 acc 0.373 F1(macro) 0.343\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 02/30 | Train loss 1.3616 acc 0.549 | Val loss 1.4695 acc 0.494 F1(macro) 0.482\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 03/30 | Train loss 0.7646 acc 0.773 | Val loss 1.6260 acc 0.494 F1(macro) 0.500\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 04/30 | Train loss 0.4258 acc 0.856 | Val loss 1.9770 acc 0.446 F1(macro) 0.454\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 05/30 | Train loss 0.2014 acc 0.934 | Val loss 1.9904 acc 0.446 F1(macro) 0.463\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 06/30 | Train loss 0.1163 acc 0.968 | Val loss 2.0799 acc 0.518 F1(macro) 0.507\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 07/30 | Train loss 0.0641 acc 0.973 | Val loss 2.5978 acc 0.470 F1(macro) 0.475\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 08/30 | Train loss 0.0754 acc 0.973 | Val loss 2.7180 acc 0.470 F1(macro) 0.477\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 09/30 | Train loss 0.0460 acc 0.983 | Val loss 2.8051 acc 0.470 F1(macro) 0.482\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 10/30 | Train loss 0.0441 acc 0.982 | Val loss 3.0771 acc 0.506 F1(macro) 0.500\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 11/30 | Train loss 0.0393 acc 0.991 | Val loss 3.2528 acc 0.518 F1(macro) 0.520\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 12/30 | Train loss 0.0322 acc 0.986 | Val loss 3.1246 acc 0.482 F1(macro) 0.455\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 13/30 | Train loss 0.0333 acc 0.992 | Val loss 2.9031 acc 0.578 F1(macro) 0.563\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 14/30 | Train loss 0.0149 acc 0.994 | Val loss 2.7380 acc 0.506 F1(macro) 0.501\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 15/30 | Train loss 0.0212 acc 0.992 | Val loss 2.8705 acc 0.530 F1(macro) 0.536\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 16/30 | Train loss 0.0139 acc 0.997 | Val loss 3.1707 acc 0.494 F1(macro) 0.497\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 17/30 | Train loss 0.0073 acc 1.000 | Val loss 3.4933 acc 0.482 F1(macro) 0.492\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 18/30 | Train loss 0.0064 acc 0.998 | Val loss 3.5670 acc 0.470 F1(macro) 0.478\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 19/30 | Train loss 0.0197 acc 0.994 | Val loss 3.5776 acc 0.482 F1(macro) 0.480\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 20/30 | Train loss 0.0117 acc 0.992 | Val loss 3.4502 acc 0.494 F1(macro) 0.499\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 21/30 | Train loss 0.0254 acc 0.992 | Val loss 3.4701 acc 0.506 F1(macro) 0.513\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 22/30 | Train loss 0.0160 acc 0.994 | Val loss 3.3219 acc 0.530 F1(macro) 0.538\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 23/30 | Train loss 0.0278 acc 0.986 | Val loss 3.3131 acc 0.554 F1(macro) 0.561\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 24/30 | Train loss 0.0253 acc 0.992 | Val loss 3.6376 acc 0.542 F1(macro) 0.541\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 25/30 | Train loss 0.0147 acc 0.995 | Val loss 3.8567 acc 0.518 F1(macro) 0.518\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 26/30 | Train loss 0.0450 acc 0.986 | Val loss 3.7554 acc 0.446 F1(macro) 0.447\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 27/30 | Train loss 0.0399 acc 0.979 | Val loss 3.6449 acc 0.494 F1(macro) 0.507\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 28/30 | Train loss 0.0381 acc 0.989 | Val loss 3.2956 acc 0.506 F1(macro) 0.513\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 29/30 | Train loss 0.0273 acc 0.991 | Val loss 3.8061 acc 0.446 F1(macro) 0.437\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 30/30 | Train loss 0.0934 acc 0.986 | Val loss 3.6499 acc 0.494 F1(macro) 0.508\n",
            "[Tiempo] ~0.05s/epoch | best Val F1(macro)=0.563\n",
            "[Test] acc=0.476 | F1(macro)=0.469 | F1(weighted)=0.460\n",
            "\n",
            "MLP_relu_hs[512, 256]_do0.2_PCA95 - Confusion Matrix — Matriz de confusión\n",
            "          pred_001  pred_002  pred_003  pred_004  pred_005  pred_006  pred_007  pred_008  pred_009  pred_010\n",
            "true_001         6         0         0         0         1         0         0         0         0         1\n",
            "true_002         0         2         3         0         1         0         0         1         0         3\n",
            "true_003         0         0         1         0         0         1         1         0         2         1\n",
            "true_004         1         1         1         3         1         0         0         0         2         0\n",
            "true_005         0         0         1         1         5         0         2         0         0         0\n",
            "true_006         1         1         0         1         0         7         0         0         0         0\n",
            "true_007         0         0         0         0         0         2         6         0         0         1\n",
            "true_008         0         0         0         0         0         0         0         4         0         1\n",
            "true_009         0         0         1         0         1         6         0         0         1         0\n",
            "true_010         1         0         0         2         0         0         0         0         1         5\n",
            "\n",
            "[Classification report]\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "         001      0.667     0.750     0.706         8\n",
            "         002      0.500     0.200     0.286        10\n",
            "         003      0.143     0.167     0.154         6\n",
            "         004      0.429     0.333     0.375         9\n",
            "         005      0.556     0.556     0.556         9\n",
            "         006      0.438     0.700     0.538        10\n",
            "         007      0.667     0.667     0.667         9\n",
            "         008      0.800     0.800     0.800         5\n",
            "         009      0.167     0.111     0.133         9\n",
            "         010      0.417     0.556     0.476         9\n",
            "\n",
            "    accuracy                          0.476        84\n",
            "   macro avg      0.478     0.484     0.469        84\n",
            "weighted avg      0.472     0.476     0.460        84\n",
            "\n",
            "\n",
            "========================================================================\n",
            "RUN | model=mlp | img=64 | bs=128 | epochs=30 | opt=adam | lr=0.0003 | aug=True | act=relu | hs=[512, 256] | do=0.2 | use_pca=True | pca_var=0.95 | whiten=False\n",
            "========================================================================\n",
            "[Device] cpu | CUDA avail=False\n",
            "[Data] imgs=832 | clases=10 | img_size=64 | augment=True | use_pca=True\n",
            "[Split] train=665 | val=83 | test=84 | batch_size=128\n",
            "[PCA] var_exp≈0.9502 | dim: 12288 → 315 | whiten=False\n",
            "[Model] MLP_relu_hs[512, 256]_do0.2_PCA95 | optimizer=Adam(lr=0.0003) | dropout=0.2 | activation=relu\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 01/30 | Train loss 2.4822 acc 0.114 | Val loss 2.1455 acc 0.265 F1(macro) 0.236\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 02/30 | Train loss 2.0650 acc 0.262 | Val loss 2.0166 acc 0.373 F1(macro) 0.346\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 03/30 | Train loss 1.7969 acc 0.395 | Val loss 1.9221 acc 0.289 F1(macro) 0.264\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 04/30 | Train loss 1.6208 acc 0.493 | Val loss 1.8343 acc 0.386 F1(macro) 0.365\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 05/30 | Train loss 1.4924 acc 0.529 | Val loss 1.7346 acc 0.422 F1(macro) 0.429\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 06/30 | Train loss 1.3424 acc 0.605 | Val loss 1.6619 acc 0.422 F1(macro) 0.405\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 07/30 | Train loss 1.2050 acc 0.647 | Val loss 1.6063 acc 0.434 F1(macro) 0.434\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 08/30 | Train loss 1.0703 acc 0.701 | Val loss 1.5624 acc 0.434 F1(macro) 0.446\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 09/30 | Train loss 0.9657 acc 0.750 | Val loss 1.5403 acc 0.446 F1(macro) 0.459\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 10/30 | Train loss 0.8369 acc 0.811 | Val loss 1.5183 acc 0.434 F1(macro) 0.433\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 11/30 | Train loss 0.7437 acc 0.818 | Val loss 1.4879 acc 0.494 F1(macro) 0.487\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 12/30 | Train loss 0.6556 acc 0.865 | Val loss 1.4871 acc 0.494 F1(macro) 0.491\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 13/30 | Train loss 0.6008 acc 0.868 | Val loss 1.4622 acc 0.506 F1(macro) 0.510\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 14/30 | Train loss 0.5151 acc 0.901 | Val loss 1.4571 acc 0.482 F1(macro) 0.493\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 15/30 | Train loss 0.4866 acc 0.904 | Val loss 1.4337 acc 0.470 F1(macro) 0.467\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 16/30 | Train loss 0.4043 acc 0.934 | Val loss 1.4225 acc 0.530 F1(macro) 0.531\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 17/30 | Train loss 0.3552 acc 0.935 | Val loss 1.4111 acc 0.566 F1(macro) 0.563\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 18/30 | Train loss 0.3240 acc 0.938 | Val loss 1.4251 acc 0.494 F1(macro) 0.490\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 19/30 | Train loss 0.2940 acc 0.947 | Val loss 1.4389 acc 0.506 F1(macro) 0.506\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 20/30 | Train loss 0.2559 acc 0.950 | Val loss 1.4461 acc 0.506 F1(macro) 0.511\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 21/30 | Train loss 0.2353 acc 0.965 | Val loss 1.4769 acc 0.494 F1(macro) 0.495\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 22/30 | Train loss 0.2257 acc 0.968 | Val loss 1.4674 acc 0.482 F1(macro) 0.491\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 23/30 | Train loss 0.1800 acc 0.982 | Val loss 1.4671 acc 0.482 F1(macro) 0.487\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 24/30 | Train loss 0.1662 acc 0.977 | Val loss 1.4595 acc 0.482 F1(macro) 0.486\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 25/30 | Train loss 0.1385 acc 0.980 | Val loss 1.4653 acc 0.494 F1(macro) 0.498\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 26/30 | Train loss 0.1357 acc 0.976 | Val loss 1.4694 acc 0.494 F1(macro) 0.501\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 27/30 | Train loss 0.1082 acc 0.988 | Val loss 1.4748 acc 0.494 F1(macro) 0.493\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 28/30 | Train loss 0.1065 acc 0.986 | Val loss 1.4816 acc 0.506 F1(macro) 0.504\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 29/30 | Train loss 0.1036 acc 0.992 | Val loss 1.4990 acc 0.506 F1(macro) 0.511\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 30/30 | Train loss 0.0933 acc 0.991 | Val loss 1.5219 acc 0.494 F1(macro) 0.500\n",
            "[Tiempo] ~0.05s/epoch | best Val F1(macro)=0.563\n",
            "[Test] acc=0.536 | F1(macro)=0.514 | F1(weighted)=0.515\n",
            "\n",
            "MLP_relu_hs[512, 256]_do0.2_PCA95 - Confusion Matrix — Matriz de confusión\n",
            "          pred_001  pred_002  pred_003  pred_004  pred_005  pred_006  pred_007  pred_008  pred_009  pred_010\n",
            "true_001         4         0         0         1         0         0         0         0         0         3\n",
            "true_002         0         7         0         0         1         0         0         1         0         1\n",
            "true_003         0         2         1         0         0         1         1         1         0         0\n",
            "true_004         2         1         0         3         1         0         1         0         0         1\n",
            "true_005         0         0         1         1         3         1         1         0         0         2\n",
            "true_006         0         1         0         2         0         7         0         0         0         0\n",
            "true_007         0         0         2         1         0         0         6         0         0         0\n",
            "true_008         0         0         0         0         0         0         0         5         0         0\n",
            "true_009         0         1         0         1         0         4         0         1         2         0\n",
            "true_010         0         0         0         1         0         0         0         0         1         7\n",
            "\n",
            "[Classification report]\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "         001      0.667     0.500     0.571         8\n",
            "         002      0.583     0.700     0.636        10\n",
            "         003      0.250     0.167     0.200         6\n",
            "         004      0.300     0.333     0.316         9\n",
            "         005      0.600     0.333     0.429         9\n",
            "         006      0.538     0.700     0.609        10\n",
            "         007      0.667     0.667     0.667         9\n",
            "         008      0.625     1.000     0.769         5\n",
            "         009      0.667     0.222     0.333         9\n",
            "         010      0.500     0.778     0.609         9\n",
            "\n",
            "    accuracy                          0.536        84\n",
            "   macro avg      0.540     0.540     0.514        84\n",
            "weighted avg      0.545     0.536     0.515        84\n",
            "\n",
            "\n",
            "========================================================================\n",
            "RUN | model=mlp | img=64 | bs=128 | epochs=30 | opt=adam | lr=0.0001 | aug=True | act=relu | hs=[512, 256] | do=0.2 | use_pca=True | pca_var=0.95 | whiten=False\n",
            "========================================================================\n",
            "[Device] cpu | CUDA avail=False\n",
            "[Data] imgs=832 | clases=10 | img_size=64 | augment=True | use_pca=True\n",
            "[Split] train=665 | val=83 | test=84 | batch_size=128\n",
            "[PCA] var_exp≈0.9502 | dim: 12288 → 315 | whiten=False\n",
            "[Model] MLP_relu_hs[512, 256]_do0.2_PCA95 | optimizer=Adam(lr=0.0001) | dropout=0.2 | activation=relu\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 01/30 | Train loss 2.5817 acc 0.089 | Val loss 2.2896 acc 0.120 F1(macro) 0.096\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 02/30 | Train loss 2.3502 acc 0.134 | Val loss 2.2027 acc 0.205 F1(macro) 0.169\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 03/30 | Train loss 2.2124 acc 0.191 | Val loss 2.1429 acc 0.301 F1(macro) 0.265\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 04/30 | Train loss 2.1034 acc 0.230 | Val loss 2.0935 acc 0.325 F1(macro) 0.299\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 05/30 | Train loss 2.0416 acc 0.305 | Val loss 2.0515 acc 0.229 F1(macro) 0.215\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 06/30 | Train loss 1.9435 acc 0.308 | Val loss 2.0136 acc 0.265 F1(macro) 0.245\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 07/30 | Train loss 1.8858 acc 0.362 | Val loss 1.9752 acc 0.277 F1(macro) 0.254\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 08/30 | Train loss 1.7991 acc 0.409 | Val loss 1.9360 acc 0.301 F1(macro) 0.280\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 09/30 | Train loss 1.7318 acc 0.445 | Val loss 1.9043 acc 0.325 F1(macro) 0.317\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 10/30 | Train loss 1.6716 acc 0.472 | Val loss 1.8758 acc 0.337 F1(macro) 0.326\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 11/30 | Train loss 1.6019 acc 0.484 | Val loss 1.8460 acc 0.349 F1(macro) 0.334\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 12/30 | Train loss 1.5455 acc 0.525 | Val loss 1.8228 acc 0.410 F1(macro) 0.394\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 13/30 | Train loss 1.5171 acc 0.526 | Val loss 1.7990 acc 0.434 F1(macro) 0.414\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 14/30 | Train loss 1.4350 acc 0.565 | Val loss 1.7796 acc 0.434 F1(macro) 0.423\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 15/30 | Train loss 1.4139 acc 0.573 | Val loss 1.7525 acc 0.458 F1(macro) 0.449\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 16/30 | Train loss 1.3256 acc 0.638 | Val loss 1.7256 acc 0.446 F1(macro) 0.435\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 17/30 | Train loss 1.2899 acc 0.623 | Val loss 1.7004 acc 0.446 F1(macro) 0.436\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 18/30 | Train loss 1.2644 acc 0.647 | Val loss 1.6822 acc 0.434 F1(macro) 0.428\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 19/30 | Train loss 1.2250 acc 0.662 | Val loss 1.6631 acc 0.434 F1(macro) 0.437\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 20/30 | Train loss 1.1572 acc 0.714 | Val loss 1.6436 acc 0.446 F1(macro) 0.453\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 21/30 | Train loss 1.1415 acc 0.684 | Val loss 1.6289 acc 0.434 F1(macro) 0.443\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 22/30 | Train loss 1.0999 acc 0.698 | Val loss 1.6128 acc 0.470 F1(macro) 0.469\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 23/30 | Train loss 1.0506 acc 0.716 | Val loss 1.6022 acc 0.458 F1(macro) 0.458\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 24/30 | Train loss 1.0051 acc 0.759 | Val loss 1.5877 acc 0.446 F1(macro) 0.440\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 25/30 | Train loss 0.9521 acc 0.755 | Val loss 1.5683 acc 0.458 F1(macro) 0.451\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 26/30 | Train loss 0.9249 acc 0.776 | Val loss 1.5476 acc 0.470 F1(macro) 0.471\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 27/30 | Train loss 0.8595 acc 0.805 | Val loss 1.5282 acc 0.470 F1(macro) 0.472\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 28/30 | Train loss 0.8328 acc 0.808 | Val loss 1.5122 acc 0.470 F1(macro) 0.472\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 29/30 | Train loss 0.8308 acc 0.797 | Val loss 1.4989 acc 0.458 F1(macro) 0.459\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95] Ep 30/30 | Train loss 0.7970 acc 0.805 | Val loss 1.5016 acc 0.470 F1(macro) 0.470\n",
            "[Tiempo] ~0.04s/epoch | best Val F1(macro)=0.472\n",
            "[Test] acc=0.488 | F1(macro)=0.476 | F1(weighted)=0.467\n",
            "\n",
            "MLP_relu_hs[512, 256]_do0.2_PCA95 - Confusion Matrix — Matriz de confusión\n",
            "          pred_001  pred_002  pred_003  pred_004  pred_005  pred_006  pred_007  pred_008  pred_009  pred_010\n",
            "true_001         4         0         0         0         0         0         0         0         0         4\n",
            "true_002         0         5         0         0         1         0         3         0         0         1\n",
            "true_003         0         1         1         0         0         1         2         1         0         0\n",
            "true_004         1         1         1         2         1         1         1         0         0         1\n",
            "true_005         0         1         0         0         3         2         1         0         0         2\n",
            "true_006         0         1         0         2         0         7         0         0         0         0\n",
            "true_007         0         0         0         1         0         0         6         0         1         1\n",
            "true_008         0         0         0         0         0         0         0         5         0         0\n",
            "true_009         0         1         0         1         0         4         0         1         2         0\n",
            "true_010         0         0         0         1         1         0         0         0         1         6\n",
            "\n",
            "[Classification report]\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "         001      0.800     0.500     0.615         8\n",
            "         002      0.500     0.500     0.500        10\n",
            "         003      0.500     0.167     0.250         6\n",
            "         004      0.286     0.222     0.250         9\n",
            "         005      0.500     0.333     0.400         9\n",
            "         006      0.467     0.700     0.560        10\n",
            "         007      0.462     0.667     0.545         9\n",
            "         008      0.714     1.000     0.833         5\n",
            "         009      0.500     0.222     0.308         9\n",
            "         010      0.400     0.667     0.500         9\n",
            "\n",
            "    accuracy                          0.488        84\n",
            "   macro avg      0.513     0.498     0.476        84\n",
            "weighted avg      0.500     0.488     0.467        84\n",
            "\n",
            "\n",
            "========================================================================\n",
            "RUN | model=mlp | img=64 | bs=128 | epochs=30 | opt=adam | lr=0.005 | aug=True | act=relu | hs=[512, 256] | do=0.4 | use_pca=True | pca_var=0.95 | whiten=False\n",
            "========================================================================\n",
            "[Device] cpu | CUDA avail=False\n",
            "[Data] imgs=832 | clases=10 | img_size=64 | augment=True | use_pca=True\n",
            "[Split] train=665 | val=83 | test=84 | batch_size=128\n",
            "[PCA] var_exp≈0.9502 | dim: 12288 → 315 | whiten=False\n",
            "[Model] MLP_relu_hs[512, 256]_do0.4_PCA95 | optimizer=Adam(lr=0.005) | dropout=0.4 | activation=relu\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 01/30 | Train loss 2.8206 acc 0.191 | Val loss 1.8154 acc 0.361 F1(macro) 0.302\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 02/30 | Train loss 1.5491 acc 0.490 | Val loss 1.5775 acc 0.434 F1(macro) 0.451\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 03/30 | Train loss 1.0606 acc 0.657 | Val loss 1.4867 acc 0.470 F1(macro) 0.463\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 04/30 | Train loss 0.7603 acc 0.744 | Val loss 1.5564 acc 0.470 F1(macro) 0.494\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 05/30 | Train loss 0.5114 acc 0.826 | Val loss 1.7068 acc 0.470 F1(macro) 0.476\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 06/30 | Train loss 0.3225 acc 0.895 | Val loss 1.9924 acc 0.458 F1(macro) 0.463\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 07/30 | Train loss 0.2419 acc 0.931 | Val loss 2.0422 acc 0.434 F1(macro) 0.441\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 08/30 | Train loss 0.1919 acc 0.941 | Val loss 2.2416 acc 0.506 F1(macro) 0.515\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 09/30 | Train loss 0.2421 acc 0.923 | Val loss 2.5557 acc 0.446 F1(macro) 0.446\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 10/30 | Train loss 0.2397 acc 0.949 | Val loss 2.5763 acc 0.446 F1(macro) 0.453\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 11/30 | Train loss 0.1816 acc 0.938 | Val loss 2.5130 acc 0.506 F1(macro) 0.504\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 12/30 | Train loss 0.1714 acc 0.943 | Val loss 2.8061 acc 0.446 F1(macro) 0.450\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 13/30 | Train loss 0.1436 acc 0.953 | Val loss 2.7979 acc 0.373 F1(macro) 0.359\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 14/30 | Train loss 0.2061 acc 0.944 | Val loss 2.6795 acc 0.410 F1(macro) 0.421\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 15/30 | Train loss 0.1464 acc 0.953 | Val loss 2.7090 acc 0.434 F1(macro) 0.433\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 16/30 | Train loss 0.1385 acc 0.955 | Val loss 2.9481 acc 0.482 F1(macro) 0.480\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 17/30 | Train loss 0.1386 acc 0.958 | Val loss 3.1037 acc 0.446 F1(macro) 0.442\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 18/30 | Train loss 0.1584 acc 0.946 | Val loss 3.1103 acc 0.494 F1(macro) 0.481\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 19/30 | Train loss 0.1398 acc 0.959 | Val loss 2.9968 acc 0.458 F1(macro) 0.451\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 20/30 | Train loss 0.1453 acc 0.953 | Val loss 3.1787 acc 0.506 F1(macro) 0.513\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 21/30 | Train loss 0.1892 acc 0.958 | Val loss 3.5908 acc 0.446 F1(macro) 0.456\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 22/30 | Train loss 0.2244 acc 0.941 | Val loss 3.4340 acc 0.458 F1(macro) 0.463\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 23/30 | Train loss 0.1864 acc 0.953 | Val loss 3.6749 acc 0.458 F1(macro) 0.459\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 24/30 | Train loss 0.1120 acc 0.968 | Val loss 3.6520 acc 0.422 F1(macro) 0.414\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 25/30 | Train loss 0.1451 acc 0.962 | Val loss 3.4484 acc 0.506 F1(macro) 0.501\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 26/30 | Train loss 0.1668 acc 0.955 | Val loss 3.9380 acc 0.494 F1(macro) 0.444\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 27/30 | Train loss 0.1050 acc 0.959 | Val loss 4.4019 acc 0.446 F1(macro) 0.419\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 28/30 | Train loss 0.0874 acc 0.974 | Val loss 4.6815 acc 0.458 F1(macro) 0.428\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 29/30 | Train loss 0.1699 acc 0.950 | Val loss 4.4036 acc 0.422 F1(macro) 0.412\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 30/30 | Train loss 0.1405 acc 0.970 | Val loss 4.6687 acc 0.422 F1(macro) 0.419\n",
            "[Tiempo] ~0.05s/epoch | best Val F1(macro)=0.515\n",
            "[Test] acc=0.571 | F1(macro)=0.545 | F1(weighted)=0.560\n",
            "\n",
            "MLP_relu_hs[512, 256]_do0.4_PCA95 - Confusion Matrix — Matriz de confusión\n",
            "          pred_001  pred_002  pred_003  pred_004  pred_005  pred_006  pred_007  pred_008  pred_009  pred_010\n",
            "true_001         6         0         0         1         1         0         0         0         0         0\n",
            "true_002         0         8         0         0         1         0         0         1         0         0\n",
            "true_003         0         1         0         1         1         0         0         1         2         0\n",
            "true_004         1         1         0         2         0         0         0         0         4         1\n",
            "true_005         0         0         0         0         7         0         1         0         0         1\n",
            "true_006         0         0         0         3         0         6         1         0         0         0\n",
            "true_007         0         0         1         0         0         1         6         1         0         0\n",
            "true_008         0         0         0         0         0         0         0         4         0         1\n",
            "true_009         0         0         0         2         0         3         0         0         4         0\n",
            "true_010         1         0         0         2         0         0         0         0         1         5\n",
            "\n",
            "[Classification report]\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "         001      0.750     0.750     0.750         8\n",
            "         002      0.800     0.800     0.800        10\n",
            "         003      0.000     0.000     0.000         6\n",
            "         004      0.182     0.222     0.200         9\n",
            "         005      0.700     0.778     0.737         9\n",
            "         006      0.600     0.600     0.600        10\n",
            "         007      0.750     0.667     0.706         9\n",
            "         008      0.571     0.800     0.667         5\n",
            "         009      0.364     0.444     0.400         9\n",
            "         010      0.625     0.556     0.588         9\n",
            "\n",
            "    accuracy                          0.571        84\n",
            "   macro avg      0.534     0.562     0.545        84\n",
            "weighted avg      0.553     0.571     0.560        84\n",
            "\n",
            "\n",
            "========================================================================\n",
            "RUN | model=mlp | img=64 | bs=128 | epochs=30 | opt=adam | lr=0.0003 | aug=True | act=relu | hs=[512, 256] | do=0.4 | use_pca=True | pca_var=0.95 | whiten=False\n",
            "========================================================================\n",
            "[Device] cpu | CUDA avail=False\n",
            "[Data] imgs=832 | clases=10 | img_size=64 | augment=True | use_pca=True\n",
            "[Split] train=665 | val=83 | test=84 | batch_size=128\n",
            "[PCA] var_exp≈0.9502 | dim: 12288 → 315 | whiten=False\n",
            "[Model] MLP_relu_hs[512, 256]_do0.4_PCA95 | optimizer=Adam(lr=0.0003) | dropout=0.4 | activation=relu\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 01/30 | Train loss 2.6762 acc 0.093 | Val loss 2.1985 acc 0.205 F1(macro) 0.148\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 02/30 | Train loss 2.3212 acc 0.203 | Val loss 2.0941 acc 0.313 F1(macro) 0.265\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 03/30 | Train loss 2.0943 acc 0.254 | Val loss 2.0155 acc 0.289 F1(macro) 0.239\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 04/30 | Train loss 1.9555 acc 0.316 | Val loss 1.9584 acc 0.217 F1(macro) 0.190\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 05/30 | Train loss 1.8976 acc 0.329 | Val loss 1.8877 acc 0.337 F1(macro) 0.326\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 06/30 | Train loss 1.7411 acc 0.405 | Val loss 1.8094 acc 0.349 F1(macro) 0.316\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 07/30 | Train loss 1.6507 acc 0.444 | Val loss 1.7541 acc 0.410 F1(macro) 0.376\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 08/30 | Train loss 1.6013 acc 0.469 | Val loss 1.7099 acc 0.446 F1(macro) 0.434\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 09/30 | Train loss 1.4768 acc 0.544 | Val loss 1.6755 acc 0.458 F1(macro) 0.450\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 10/30 | Train loss 1.4058 acc 0.564 | Val loss 1.6510 acc 0.446 F1(macro) 0.447\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 11/30 | Train loss 1.3494 acc 0.552 | Val loss 1.6179 acc 0.422 F1(macro) 0.417\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 12/30 | Train loss 1.2603 acc 0.618 | Val loss 1.5920 acc 0.470 F1(macro) 0.463\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 13/30 | Train loss 1.1870 acc 0.641 | Val loss 1.5673 acc 0.458 F1(macro) 0.447\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 14/30 | Train loss 1.0941 acc 0.641 | Val loss 1.5407 acc 0.458 F1(macro) 0.449\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 15/30 | Train loss 1.0587 acc 0.662 | Val loss 1.5165 acc 0.434 F1(macro) 0.428\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 16/30 | Train loss 0.9726 acc 0.698 | Val loss 1.5008 acc 0.446 F1(macro) 0.439\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 17/30 | Train loss 0.9509 acc 0.701 | Val loss 1.4806 acc 0.494 F1(macro) 0.486\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 18/30 | Train loss 0.8815 acc 0.752 | Val loss 1.4675 acc 0.518 F1(macro) 0.516\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 19/30 | Train loss 0.8278 acc 0.753 | Val loss 1.4579 acc 0.506 F1(macro) 0.506\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 20/30 | Train loss 0.7525 acc 0.783 | Val loss 1.4471 acc 0.506 F1(macro) 0.508\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 21/30 | Train loss 0.7218 acc 0.776 | Val loss 1.4455 acc 0.470 F1(macro) 0.468\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 22/30 | Train loss 0.6852 acc 0.795 | Val loss 1.4385 acc 0.458 F1(macro) 0.457\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 23/30 | Train loss 0.6080 acc 0.824 | Val loss 1.4439 acc 0.482 F1(macro) 0.487\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 24/30 | Train loss 0.5880 acc 0.824 | Val loss 1.4398 acc 0.494 F1(macro) 0.504\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 25/30 | Train loss 0.5181 acc 0.863 | Val loss 1.4431 acc 0.446 F1(macro) 0.450\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 26/30 | Train loss 0.5318 acc 0.850 | Val loss 1.4363 acc 0.458 F1(macro) 0.464\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 27/30 | Train loss 0.4942 acc 0.877 | Val loss 1.4289 acc 0.506 F1(macro) 0.513\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 28/30 | Train loss 0.4323 acc 0.886 | Val loss 1.4205 acc 0.482 F1(macro) 0.490\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 29/30 | Train loss 0.4283 acc 0.892 | Val loss 1.4304 acc 0.506 F1(macro) 0.520\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 30/30 | Train loss 0.3964 acc 0.890 | Val loss 1.4349 acc 0.518 F1(macro) 0.526\n",
            "[Tiempo] ~0.04s/epoch | best Val F1(macro)=0.526\n",
            "[Test] acc=0.524 | F1(macro)=0.498 | F1(weighted)=0.495\n",
            "\n",
            "MLP_relu_hs[512, 256]_do0.4_PCA95 - Confusion Matrix — Matriz de confusión\n",
            "          pred_001  pred_002  pred_003  pred_004  pred_005  pred_006  pred_007  pred_008  pred_009  pred_010\n",
            "true_001         4         0         0         0         0         0         0         0         0         4\n",
            "true_002         0         6         0         0         1         0         1         1         0         1\n",
            "true_003         0         2         1         0         0         1         1         1         0         0\n",
            "true_004         1         1         0         4         1         0         1         0         0         1\n",
            "true_005         0         0         0         2         3         1         1         0         0         2\n",
            "true_006         0         1         0         2         0         7         0         0         0         0\n",
            "true_007         0         0         1         1         0         0         6         0         0         1\n",
            "true_008         0         0         0         0         0         0         0         5         0         0\n",
            "true_009         0         1         0         0         1         5         0         1         1         0\n",
            "true_010         0         0         0         1         0         0         0         0         1         7\n",
            "\n",
            "[Classification report]\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "         001      0.800     0.500     0.615         8\n",
            "         002      0.545     0.600     0.571        10\n",
            "         003      0.500     0.167     0.250         6\n",
            "         004      0.400     0.444     0.421         9\n",
            "         005      0.500     0.333     0.400         9\n",
            "         006      0.500     0.700     0.583        10\n",
            "         007      0.600     0.667     0.632         9\n",
            "         008      0.625     1.000     0.769         5\n",
            "         009      0.500     0.111     0.182         9\n",
            "         010      0.438     0.778     0.560         9\n",
            "\n",
            "    accuracy                          0.524        84\n",
            "   macro avg      0.541     0.530     0.498        84\n",
            "weighted avg      0.535     0.524     0.495        84\n",
            "\n",
            "\n",
            "========================================================================\n",
            "RUN | model=mlp | img=64 | bs=128 | epochs=30 | opt=adam | lr=0.0001 | aug=True | act=relu | hs=[512, 256] | do=0.4 | use_pca=True | pca_var=0.95 | whiten=False\n",
            "========================================================================\n",
            "[Device] cpu | CUDA avail=False\n",
            "[Data] imgs=832 | clases=10 | img_size=64 | augment=True | use_pca=True\n",
            "[Split] train=665 | val=83 | test=84 | batch_size=128\n",
            "[PCA] var_exp≈0.9502 | dim: 12288 → 315 | whiten=False\n",
            "[Model] MLP_relu_hs[512, 256]_do0.4_PCA95 | optimizer=Adam(lr=0.0001) | dropout=0.4 | activation=relu\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 01/30 | Train loss 2.7912 acc 0.092 | Val loss 2.3132 acc 0.133 F1(macro) 0.105\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 02/30 | Train loss 2.5601 acc 0.128 | Val loss 2.2427 acc 0.169 F1(macro) 0.121\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 03/30 | Train loss 2.4369 acc 0.138 | Val loss 2.1992 acc 0.217 F1(macro) 0.158\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 04/30 | Train loss 2.3498 acc 0.179 | Val loss 2.1590 acc 0.265 F1(macro) 0.218\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 05/30 | Train loss 2.3476 acc 0.177 | Val loss 2.1195 acc 0.253 F1(macro) 0.215\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 06/30 | Train loss 2.2203 acc 0.212 | Val loss 2.0855 acc 0.301 F1(macro) 0.264\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 07/30 | Train loss 2.1706 acc 0.238 | Val loss 2.0553 acc 0.277 F1(macro) 0.230\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 08/30 | Train loss 2.1586 acc 0.232 | Val loss 2.0289 acc 0.265 F1(macro) 0.229\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 09/30 | Train loss 2.0619 acc 0.290 | Val loss 2.0068 acc 0.265 F1(macro) 0.229\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 10/30 | Train loss 2.0104 acc 0.296 | Val loss 1.9866 acc 0.265 F1(macro) 0.230\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 11/30 | Train loss 1.9697 acc 0.304 | Val loss 1.9661 acc 0.277 F1(macro) 0.239\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 12/30 | Train loss 1.9242 acc 0.353 | Val loss 1.9466 acc 0.301 F1(macro) 0.271\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 13/30 | Train loss 1.8974 acc 0.347 | Val loss 1.9275 acc 0.337 F1(macro) 0.314\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 14/30 | Train loss 1.8266 acc 0.370 | Val loss 1.9092 acc 0.373 F1(macro) 0.338\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 15/30 | Train loss 1.8156 acc 0.374 | Val loss 1.8912 acc 0.373 F1(macro) 0.347\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 16/30 | Train loss 1.7520 acc 0.403 | Val loss 1.8723 acc 0.373 F1(macro) 0.339\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 17/30 | Train loss 1.7875 acc 0.383 | Val loss 1.8539 acc 0.361 F1(macro) 0.316\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 18/30 | Train loss 1.7204 acc 0.389 | Val loss 1.8357 acc 0.373 F1(macro) 0.346\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 19/30 | Train loss 1.6724 acc 0.421 | Val loss 1.8184 acc 0.386 F1(macro) 0.354\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 20/30 | Train loss 1.6314 acc 0.454 | Val loss 1.8031 acc 0.373 F1(macro) 0.348\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 21/30 | Train loss 1.6386 acc 0.444 | Val loss 1.7894 acc 0.361 F1(macro) 0.338\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 22/30 | Train loss 1.6106 acc 0.457 | Val loss 1.7758 acc 0.373 F1(macro) 0.346\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 23/30 | Train loss 1.5423 acc 0.481 | Val loss 1.7652 acc 0.410 F1(macro) 0.386\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 24/30 | Train loss 1.5254 acc 0.493 | Val loss 1.7547 acc 0.410 F1(macro) 0.386\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 25/30 | Train loss 1.4894 acc 0.481 | Val loss 1.7425 acc 0.434 F1(macro) 0.413\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 26/30 | Train loss 1.4871 acc 0.490 | Val loss 1.7224 acc 0.422 F1(macro) 0.401\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 27/30 | Train loss 1.4479 acc 0.510 | Val loss 1.7021 acc 0.434 F1(macro) 0.423\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 28/30 | Train loss 1.4063 acc 0.556 | Val loss 1.6832 acc 0.410 F1(macro) 0.409\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 29/30 | Train loss 1.4003 acc 0.528 | Val loss 1.6671 acc 0.434 F1(macro) 0.428\n",
            "[MLP_relu_hs[512, 256]_do0.4_PCA95] Ep 30/30 | Train loss 1.3661 acc 0.555 | Val loss 1.6577 acc 0.458 F1(macro) 0.457\n",
            "[Tiempo] ~0.05s/epoch | best Val F1(macro)=0.457\n",
            "[Test] acc=0.488 | F1(macro)=0.447 | F1(weighted)=0.446\n",
            "\n",
            "MLP_relu_hs[512, 256]_do0.4_PCA95 - Confusion Matrix — Matriz de confusión\n",
            "          pred_001  pred_002  pred_003  pred_004  pred_005  pred_006  pred_007  pred_008  pred_009  pred_010\n",
            "true_001         4         0         0         0         0         0         0         0         0         4\n",
            "true_002         0         7         0         0         1         0         1         0         0         1\n",
            "true_003         0         3         0         0         0         1         1         1         0         0\n",
            "true_004         1         2         0         2         1         1         1         0         0         1\n",
            "true_005         0         1         0         0         3         2         1         0         0         2\n",
            "true_006         0         1         0         2         0         7         0         0         0         0\n",
            "true_007         1         0         0         0         0         0         6         0         1         1\n",
            "true_008         0         0         0         0         0         0         0         5         0         0\n",
            "true_009         0         1         0         2         0         4         0         1         1         0\n",
            "true_010         0         0         0         1         1         0         0         0         1         6\n",
            "\n",
            "[Classification report]\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "         001      0.667     0.500     0.571         8\n",
            "         002      0.467     0.700     0.560        10\n",
            "         003      0.000     0.000     0.000         6\n",
            "         004      0.286     0.222     0.250         9\n",
            "         005      0.500     0.333     0.400         9\n",
            "         006      0.467     0.700     0.560        10\n",
            "         007      0.600     0.667     0.632         9\n",
            "         008      0.714     1.000     0.833         5\n",
            "         009      0.333     0.111     0.167         9\n",
            "         010      0.400     0.667     0.500         9\n",
            "\n",
            "    accuracy                          0.488        84\n",
            "   macro avg      0.443     0.490     0.447        84\n",
            "weighted avg      0.444     0.488     0.446        84\n",
            "\n",
            "\n",
            "========================================================================\n",
            "RUN | model=mlp | img=64 | bs=128 | epochs=30 | opt=adam | lr=0.005 | aug=True | act=relu | hs=[512, 256] | do=0.2 | use_pca=True | pca_var=0.95 | whiten=True\n",
            "========================================================================\n",
            "[Device] cpu | CUDA avail=False\n",
            "[Data] imgs=832 | clases=10 | img_size=64 | augment=True | use_pca=True\n",
            "[Split] train=665 | val=83 | test=84 | batch_size=128\n",
            "[PCA] var_exp≈0.9502 | dim: 12288 → 315 | whiten=True\n",
            "[Model] MLP_relu_hs[512, 256]_do0.2_PCA95W | optimizer=Adam(lr=0.005) | dropout=0.2 | activation=relu\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 01/30 | Train loss 2.3167 acc 0.108 | Val loss 2.1593 acc 0.386 F1(macro) 0.328\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 02/30 | Train loss 1.6234 acc 0.666 | Val loss 1.7440 acc 0.361 F1(macro) 0.340\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 03/30 | Train loss 0.5713 acc 0.872 | Val loss 1.6820 acc 0.386 F1(macro) 0.393\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 04/30 | Train loss 0.1081 acc 0.985 | Val loss 2.0262 acc 0.470 F1(macro) 0.452\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 05/30 | Train loss 0.0563 acc 0.985 | Val loss 2.4028 acc 0.446 F1(macro) 0.427\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 06/30 | Train loss 0.0135 acc 0.998 | Val loss 2.8826 acc 0.398 F1(macro) 0.388\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 07/30 | Train loss 0.0101 acc 0.998 | Val loss 3.0717 acc 0.398 F1(macro) 0.395\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 08/30 | Train loss 0.0076 acc 0.998 | Val loss 3.2502 acc 0.398 F1(macro) 0.391\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 09/30 | Train loss 0.0093 acc 0.997 | Val loss 3.6167 acc 0.434 F1(macro) 0.419\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 10/30 | Train loss 0.0052 acc 0.998 | Val loss 3.5019 acc 0.373 F1(macro) 0.364\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 11/30 | Train loss 0.0081 acc 0.995 | Val loss 3.5554 acc 0.373 F1(macro) 0.359\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 12/30 | Train loss 0.0043 acc 1.000 | Val loss 3.6219 acc 0.398 F1(macro) 0.387\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 13/30 | Train loss 0.0027 acc 1.000 | Val loss 3.7081 acc 0.398 F1(macro) 0.387\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 14/30 | Train loss 0.0023 acc 1.000 | Val loss 3.7282 acc 0.398 F1(macro) 0.390\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 15/30 | Train loss 0.0032 acc 1.000 | Val loss 3.7485 acc 0.410 F1(macro) 0.400\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 16/30 | Train loss 0.0022 acc 1.000 | Val loss 3.7529 acc 0.434 F1(macro) 0.424\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 17/30 | Train loss 0.0012 acc 1.000 | Val loss 3.7996 acc 0.446 F1(macro) 0.446\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 18/30 | Train loss 0.0023 acc 1.000 | Val loss 3.8497 acc 0.458 F1(macro) 0.452\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 19/30 | Train loss 0.0057 acc 0.995 | Val loss 3.9565 acc 0.422 F1(macro) 0.410\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 20/30 | Train loss 0.0114 acc 0.995 | Val loss 4.1181 acc 0.434 F1(macro) 0.422\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 21/30 | Train loss 0.0022 acc 1.000 | Val loss 4.2397 acc 0.434 F1(macro) 0.420\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 22/30 | Train loss 0.0075 acc 0.998 | Val loss 4.1475 acc 0.422 F1(macro) 0.422\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 23/30 | Train loss 0.0039 acc 0.998 | Val loss 4.2544 acc 0.422 F1(macro) 0.439\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 24/30 | Train loss 0.0109 acc 0.998 | Val loss 4.4541 acc 0.410 F1(macro) 0.421\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 25/30 | Train loss 0.0056 acc 0.997 | Val loss 4.4289 acc 0.410 F1(macro) 0.426\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 26/30 | Train loss 0.0056 acc 0.998 | Val loss 4.7385 acc 0.446 F1(macro) 0.450\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 27/30 | Train loss 0.0218 acc 0.988 | Val loss 4.8055 acc 0.386 F1(macro) 0.402\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 28/30 | Train loss 0.0728 acc 0.976 | Val loss 5.0271 acc 0.410 F1(macro) 0.409\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 29/30 | Train loss 0.1864 acc 0.965 | Val loss 5.7977 acc 0.373 F1(macro) 0.396\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 30/30 | Train loss 0.1765 acc 0.950 | Val loss 6.3846 acc 0.386 F1(macro) 0.388\n",
            "[Tiempo] ~0.04s/epoch | best Val F1(macro)=0.452\n",
            "[Test] acc=0.536 | F1(macro)=0.528 | F1(weighted)=0.518\n",
            "\n",
            "MLP_relu_hs[512, 256]_do0.2_PCA95W - Confusion Matrix — Matriz de confusión\n",
            "          pred_001  pred_002  pred_003  pred_004  pred_005  pred_006  pred_007  pred_008  pred_009  pred_010\n",
            "true_001         3         0         2         0         0         0         0         0         0         3\n",
            "true_002         0         8         0         1         1         0         0         0         0         0\n",
            "true_003         0         0         3         0         1         1         0         0         1         0\n",
            "true_004         1         1         2         2         0         1         0         0         1         1\n",
            "true_005         0         0         1         0         6         0         0         0         0         2\n",
            "true_006         0         1         0         0         0         7         0         0         1         1\n",
            "true_007         1         1         0         0         1         1         4         0         0         1\n",
            "true_008         0         0         0         0         0         0         0         4         0         1\n",
            "true_009         0         0         1         0         0         6         1         0         1         0\n",
            "true_010         0         1         0         1         0         0         0         0         0         7\n",
            "\n",
            "[Classification report]\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "         001      0.600     0.375     0.462         8\n",
            "         002      0.667     0.800     0.727        10\n",
            "         003      0.333     0.500     0.400         6\n",
            "         004      0.500     0.222     0.308         9\n",
            "         005      0.667     0.667     0.667         9\n",
            "         006      0.438     0.700     0.538        10\n",
            "         007      0.800     0.444     0.571         9\n",
            "         008      1.000     0.800     0.889         5\n",
            "         009      0.250     0.111     0.154         9\n",
            "         010      0.438     0.778     0.560         9\n",
            "\n",
            "    accuracy                          0.536        84\n",
            "   macro avg      0.569     0.540     0.528        84\n",
            "weighted avg      0.556     0.536     0.518        84\n",
            "\n",
            "\n",
            "========================================================================\n",
            "RUN | model=mlp | img=64 | bs=128 | epochs=30 | opt=adam | lr=0.0003 | aug=True | act=relu | hs=[512, 256] | do=0.2 | use_pca=True | pca_var=0.95 | whiten=True\n",
            "========================================================================\n",
            "[Device] cpu | CUDA avail=False\n",
            "[Data] imgs=832 | clases=10 | img_size=64 | augment=True | use_pca=True\n",
            "[Split] train=665 | val=83 | test=84 | batch_size=128\n",
            "[PCA] var_exp≈0.9502 | dim: 12288 → 315 | whiten=True\n",
            "[Model] MLP_relu_hs[512, 256]_do0.2_PCA95W | optimizer=Adam(lr=0.0003) | dropout=0.2 | activation=relu\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 01/30 | Train loss 2.3081 acc 0.098 | Val loss 2.2781 acc 0.133 F1(macro) 0.090\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 02/30 | Train loss 2.2548 acc 0.171 | Val loss 2.2644 acc 0.205 F1(macro) 0.136\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 03/30 | Train loss 2.2108 acc 0.295 | Val loss 2.2509 acc 0.181 F1(macro) 0.139\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 04/30 | Train loss 2.1739 acc 0.355 | Val loss 2.2354 acc 0.181 F1(macro) 0.136\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 05/30 | Train loss 2.1326 acc 0.420 | Val loss 2.2189 acc 0.181 F1(macro) 0.137\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 06/30 | Train loss 2.0874 acc 0.486 | Val loss 2.2009 acc 0.241 F1(macro) 0.184\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 07/30 | Train loss 2.0276 acc 0.561 | Val loss 2.1799 acc 0.277 F1(macro) 0.222\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 08/30 | Train loss 1.9646 acc 0.589 | Val loss 2.1556 acc 0.313 F1(macro) 0.274\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 09/30 | Train loss 1.8833 acc 0.660 | Val loss 2.1273 acc 0.361 F1(macro) 0.345\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 10/30 | Train loss 1.7999 acc 0.711 | Val loss 2.0933 acc 0.373 F1(macro) 0.343\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 11/30 | Train loss 1.6956 acc 0.779 | Val loss 2.0546 acc 0.386 F1(macro) 0.352\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 12/30 | Train loss 1.5778 acc 0.835 | Val loss 2.0083 acc 0.410 F1(macro) 0.366\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 13/30 | Train loss 1.4444 acc 0.883 | Val loss 1.9570 acc 0.422 F1(macro) 0.375\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 14/30 | Train loss 1.3004 acc 0.904 | Val loss 1.9030 acc 0.470 F1(macro) 0.445\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 15/30 | Train loss 1.1652 acc 0.928 | Val loss 1.8409 acc 0.458 F1(macro) 0.432\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 16/30 | Train loss 1.0099 acc 0.926 | Val loss 1.7836 acc 0.470 F1(macro) 0.446\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 17/30 | Train loss 0.8541 acc 0.955 | Val loss 1.7337 acc 0.494 F1(macro) 0.467\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 18/30 | Train loss 0.7169 acc 0.967 | Val loss 1.6896 acc 0.494 F1(macro) 0.471\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 19/30 | Train loss 0.6184 acc 0.977 | Val loss 1.6455 acc 0.446 F1(macro) 0.452\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 20/30 | Train loss 0.5134 acc 0.977 | Val loss 1.6150 acc 0.434 F1(macro) 0.445\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 21/30 | Train loss 0.4163 acc 0.994 | Val loss 1.5973 acc 0.434 F1(macro) 0.431\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 22/30 | Train loss 0.3577 acc 0.988 | Val loss 1.5792 acc 0.458 F1(macro) 0.444\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 23/30 | Train loss 0.2945 acc 0.994 | Val loss 1.5689 acc 0.470 F1(macro) 0.452\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 24/30 | Train loss 0.2488 acc 0.994 | Val loss 1.5544 acc 0.470 F1(macro) 0.468\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 25/30 | Train loss 0.2081 acc 0.994 | Val loss 1.5495 acc 0.458 F1(macro) 0.452\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 26/30 | Train loss 0.1786 acc 0.995 | Val loss 1.5445 acc 0.458 F1(macro) 0.452\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 27/30 | Train loss 0.1499 acc 0.998 | Val loss 1.5425 acc 0.446 F1(macro) 0.449\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 28/30 | Train loss 0.1311 acc 1.000 | Val loss 1.5430 acc 0.434 F1(macro) 0.435\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 29/30 | Train loss 0.1180 acc 1.000 | Val loss 1.5476 acc 0.434 F1(macro) 0.435\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 30/30 | Train loss 0.1022 acc 1.000 | Val loss 1.5520 acc 0.434 F1(macro) 0.434\n",
            "[Tiempo] ~0.05s/epoch | best Val F1(macro)=0.471\n",
            "[Test] acc=0.536 | F1(macro)=0.519 | F1(weighted)=0.520\n",
            "\n",
            "MLP_relu_hs[512, 256]_do0.2_PCA95W - Confusion Matrix — Matriz de confusión\n",
            "          pred_001  pred_002  pred_003  pred_004  pred_005  pred_006  pred_007  pred_008  pred_009  pred_010\n",
            "true_001         6         0         0         1         0         0         0         0         0         1\n",
            "true_002         1         8         0         0         0         0         1         0         0         0\n",
            "true_003         0         1         1         0         0         1         1         0         1         1\n",
            "true_004         2         2         1         2         0         0         1         0         1         0\n",
            "true_005         1         0         0         0         5         2         0         0         0         1\n",
            "true_006         1         1         0         1         0         6         1         0         0         0\n",
            "true_007         1         0         1         0         0         0         7         0         0         0\n",
            "true_008         0         0         0         0         1         0         0         3         0         1\n",
            "true_009         0         0         0         0         1         5         0         0         3         0\n",
            "true_010         2         0         0         1         1         0         0         0         1         4\n",
            "\n",
            "[Classification report]\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "         001      0.429     0.750     0.545         8\n",
            "         002      0.667     0.800     0.727        10\n",
            "         003      0.333     0.167     0.222         6\n",
            "         004      0.400     0.222     0.286         9\n",
            "         005      0.625     0.556     0.588         9\n",
            "         006      0.429     0.600     0.500        10\n",
            "         007      0.636     0.778     0.700         9\n",
            "         008      1.000     0.600     0.750         5\n",
            "         009      0.500     0.333     0.400         9\n",
            "         010      0.500     0.444     0.471         9\n",
            "\n",
            "    accuracy                          0.536        84\n",
            "   macro avg      0.552     0.525     0.519        84\n",
            "weighted avg      0.540     0.536     0.520        84\n",
            "\n",
            "\n",
            "========================================================================\n",
            "RUN | model=mlp | img=64 | bs=128 | epochs=30 | opt=adam | lr=0.0001 | aug=True | act=relu | hs=[512, 256] | do=0.2 | use_pca=True | pca_var=0.95 | whiten=True\n",
            "========================================================================\n",
            "[Device] cpu | CUDA avail=False\n",
            "[Data] imgs=832 | clases=10 | img_size=64 | augment=True | use_pca=True\n",
            "[Split] train=665 | val=83 | test=84 | batch_size=128\n",
            "[PCA] var_exp≈0.9502 | dim: 12288 → 315 | whiten=True\n",
            "[Model] MLP_relu_hs[512, 256]_do0.2_PCA95W | optimizer=Adam(lr=0.0001) | dropout=0.2 | activation=relu\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 01/30 | Train loss 2.3112 acc 0.098 | Val loss 2.2907 acc 0.133 F1(macro) 0.082\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 02/30 | Train loss 2.2930 acc 0.122 | Val loss 2.2850 acc 0.120 F1(macro) 0.073\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 03/30 | Train loss 2.2719 acc 0.144 | Val loss 2.2797 acc 0.133 F1(macro) 0.089\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 04/30 | Train loss 2.2592 acc 0.155 | Val loss 2.2746 acc 0.169 F1(macro) 0.120\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 05/30 | Train loss 2.2473 acc 0.191 | Val loss 2.2699 acc 0.181 F1(macro) 0.128\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 06/30 | Train loss 2.2385 acc 0.203 | Val loss 2.2654 acc 0.169 F1(macro) 0.113\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 07/30 | Train loss 2.2239 acc 0.242 | Val loss 2.2609 acc 0.181 F1(macro) 0.124\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 08/30 | Train loss 2.2102 acc 0.272 | Val loss 2.2563 acc 0.169 F1(macro) 0.114\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 09/30 | Train loss 2.1953 acc 0.308 | Val loss 2.2517 acc 0.169 F1(macro) 0.126\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 10/30 | Train loss 2.1835 acc 0.323 | Val loss 2.2470 acc 0.157 F1(macro) 0.123\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 11/30 | Train loss 2.1650 acc 0.356 | Val loss 2.2421 acc 0.193 F1(macro) 0.160\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 12/30 | Train loss 2.1520 acc 0.380 | Val loss 2.2368 acc 0.217 F1(macro) 0.175\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 13/30 | Train loss 2.1365 acc 0.402 | Val loss 2.2313 acc 0.217 F1(macro) 0.170\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 14/30 | Train loss 2.1153 acc 0.436 | Val loss 2.2255 acc 0.217 F1(macro) 0.161\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 15/30 | Train loss 2.1054 acc 0.453 | Val loss 2.2185 acc 0.229 F1(macro) 0.168\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 16/30 | Train loss 2.0856 acc 0.489 | Val loss 2.2115 acc 0.253 F1(macro) 0.184\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 17/30 | Train loss 2.0615 acc 0.528 | Val loss 2.2045 acc 0.265 F1(macro) 0.202\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 18/30 | Train loss 2.0393 acc 0.562 | Val loss 2.1971 acc 0.253 F1(macro) 0.203\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 19/30 | Train loss 2.0243 acc 0.567 | Val loss 2.1887 acc 0.241 F1(macro) 0.198\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 20/30 | Train loss 2.0011 acc 0.588 | Val loss 2.1799 acc 0.229 F1(macro) 0.193\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 21/30 | Train loss 1.9701 acc 0.626 | Val loss 2.1715 acc 0.253 F1(macro) 0.225\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 22/30 | Train loss 1.9491 acc 0.620 | Val loss 2.1624 acc 0.325 F1(macro) 0.305\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 23/30 | Train loss 1.9231 acc 0.660 | Val loss 2.1531 acc 0.313 F1(macro) 0.283\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 24/30 | Train loss 1.8895 acc 0.683 | Val loss 2.1428 acc 0.337 F1(macro) 0.320\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 25/30 | Train loss 1.8598 acc 0.708 | Val loss 2.1317 acc 0.325 F1(macro) 0.302\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 26/30 | Train loss 1.8220 acc 0.726 | Val loss 2.1193 acc 0.349 F1(macro) 0.334\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 27/30 | Train loss 1.7819 acc 0.732 | Val loss 2.1059 acc 0.386 F1(macro) 0.364\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 28/30 | Train loss 1.7532 acc 0.731 | Val loss 2.0921 acc 0.398 F1(macro) 0.375\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 29/30 | Train loss 1.7250 acc 0.767 | Val loss 2.0773 acc 0.422 F1(macro) 0.396\n",
            "[MLP_relu_hs[512, 256]_do0.2_PCA95W] Ep 30/30 | Train loss 1.6757 acc 0.802 | Val loss 2.0624 acc 0.386 F1(macro) 0.366\n",
            "[Tiempo] ~0.04s/epoch | best Val F1(macro)=0.396\n",
            "[Test] acc=0.440 | F1(macro)=0.355 | F1(weighted)=0.387\n",
            "\n",
            "MLP_relu_hs[512, 256]_do0.2_PCA95W - Confusion Matrix — Matriz de confusión\n",
            "          pred_001  pred_002  pred_003  pred_004  pred_005  pred_006  pred_007  pred_008  pred_009  pred_010\n",
            "true_001         5         0         0         0         0         0         0         0         1         2\n",
            "true_002         0         8         0         0         0         0         2         0         0         0\n",
            "true_003         0         2         0         0         0         1         2         0         1         0\n",
            "true_004         2         2         0         2         0         0         2         0         1         0\n",
            "true_005         1         0         0         0         4         3         0         0         0         1\n",
            "true_006         0         1         0         0         0         8         1         0         0         0\n",
            "true_007         0         2         0         0         0         1         6         0         0         0\n",
            "true_008         0         2         0         0         1         1         0         0         0         1\n",
            "true_009         0         0         0         1         0         5         0         0         3         0\n",
            "true_010         1         1         0         2         1         1         1         0         1         1\n",
            "\n",
            "[Classification report]\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "         001      0.556     0.625     0.588         8\n",
            "         002      0.444     0.800     0.571        10\n",
            "         003      0.000     0.000     0.000         6\n",
            "         004      0.400     0.222     0.286         9\n",
            "         005      0.667     0.444     0.533         9\n",
            "         006      0.400     0.800     0.533        10\n",
            "         007      0.429     0.667     0.522         9\n",
            "         008      0.000     0.000     0.000         5\n",
            "         009      0.429     0.333     0.375         9\n",
            "         010      0.200     0.111     0.143         9\n",
            "\n",
            "    accuracy                          0.440        84\n",
            "   macro avg      0.352     0.400     0.355        84\n",
            "weighted avg      0.381     0.440     0.387        84\n",
            "\n",
            "\n",
            "========================================================================\n",
            "RUN | model=mlp | img=64 | bs=128 | epochs=30 | opt=adam | lr=0.005 | aug=True | act=relu | hs=[512, 256] | do=0.4 | use_pca=True | pca_var=0.95 | whiten=True\n",
            "========================================================================\n",
            "[Device] cpu | CUDA avail=False\n",
            "[Data] imgs=832 | clases=10 | img_size=64 | augment=True | use_pca=True\n",
            "[Split] train=665 | val=83 | test=84 | batch_size=128\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# ========================================================\n",
        "# 7. Visualización de artefactos guardados (curvas + reports + CM tabular)\n",
        "# ========================================================\n",
        "import os, glob\n",
        "from IPython.display import Image, display\n",
        "import pandas as pd\n",
        "\n",
        "print(\"Imágenes guardadas en outputs/:\")\n",
        "imgs = sorted(glob.glob(\"outputs/*.png\"))\n",
        "if imgs:\n",
        "    for img in imgs:\n",
        "        print(\" -\", img)\n",
        "        display(Image(filename=img))\n",
        "else:\n",
        "    print(\" (no hay PNGs — ejecuta la Celda 6 con save_artifacts=True en los mejores)\")\n",
        "\n",
        "def show_report(prefix):\n",
        "    csv_path = f\"outputs/{prefix}_classification_report.csv\"\n",
        "    if os.path.exists(csv_path):\n",
        "        print(\"\\nReporte (classification_report):\", csv_path)\n",
        "        df = pd.read_csv(csv_path, index_col=0)\n",
        "        display(df)\n",
        "    else:\n",
        "        print(\"\\nNo se encontró:\", csv_path)\n",
        "\n",
        "def show_confusion(prefix):\n",
        "    raw_path  = f\"outputs/{prefix}_confusion_matrix.csv\"\n",
        "    norm_path = f\"outputs/{prefix}_confusion_matrix_norm.csv\"\n",
        "\n",
        "    if os.path.exists(raw_path):\n",
        "        print(\"\\nMatriz de confusión (cruda):\", raw_path)\n",
        "        df_raw = pd.read_csv(raw_path, index_col=0)\n",
        "        display(df_raw)\n",
        "    else:\n",
        "        print(\"\\nNo se encontró:\", raw_path)\n",
        "\n",
        "    if os.path.exists(norm_path):\n",
        "        print(\"\\nMatriz de confusión (normalizada por fila):\", norm_path)\n",
        "        df_norm = pd.read_csv(norm_path, index_col=0)\n",
        "        display(df_norm)\n",
        "    else:\n",
        "        print(\"No se encontró:\", norm_path)\n",
        "\n",
        "# Usa los prefijos obtenidos en la celda 6:\n",
        "print(\"\\n=== MLP (mejor) ===\")\n",
        "show_report(best_title_mlp)\n",
        "show_confusion(best_title_mlp)\n",
        "\n",
        "print(\"\\n=== CNN (mejor) ===\")\n",
        "show_report(best_title_cnn)\n",
        "show_confusion(best_title_cnn)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "jpoq_bn8vVXd",
        "outputId": "9ddd28b8-61ad-48ba-a3ae-42abfe6fb13d"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Imágenes guardadas en outputs/:\n",
            " - outputs/MLP_sigmoid_hs[512, 256]_do0.4_PCA95_acc.png\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " - outputs/MLP_sigmoid_hs[512, 256]_do0.4_PCA95_loss.png\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " - outputs/SimpleCNN_acc.png\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " - outputs/SimpleCNN_loss.png\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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ExcXx/nz53n11VcxmUz8/vvvPPPMMwWKefv27QwePJgLFy5w3333sWvXLpKTk7l06RJHjhxh/PjxpKamcs8997Bx40aHe//66y8A2rVrR926dQv+B5YNX19f/vvf/wLGus2cZifzo3Hjxtx7770AvPDCC6SkpDglRk+bNm0aU6ZMAeD+++/n5MmTnD9/nvj4eKZMmYKPjw9Lly7lvvvuc7gvKSmJhx9+GLPZzNixY9m/fz+XL18mPj6eS5cusXHjRp588kmqVavmcN+DDz5ISkoKffv2Zfv27aSmpnL+/HmSk5PZsWMHL7/8skd3ahURKRJPZ6QiIuIe9913n8OMSrt27czjx483f/755+bt27ebMzMzc70/PzOEgYGB5n379mX5/Oeff2597bCwMHNsbGyWa55//nkzYG7YsGGWz1lmsgDzuHHjso3vueeeMwNmHx8f84kTJ7K9P7sZwt69e5sB8zPPPJPDV242P/LII2bAPGTIEOu5tLQ060zTfffdl+O9+WE/Q2g2m82ZmZnmyMhIM2AePHiww7UFmSE0m83mmJgYc1BQkBkwv/POOw7XlsQZwqSkJHOlSpXMgHn06NHZXjN16lTrczdu3Gg9v27dOjNgLleunDktLS1fr3f69Gnrs06ePJmve0REShLNEIqIlBEffPABzz//POXKlcNsNrNlyxY++OAD7rnnHlq1akV4eDgTJ07McR1ffowYMYJGjRplOd+vXz/r8f3330/lypVzvObAgQMkJibm+BqWNXZXe/LJJwkMDCQ9PZ1ffvklX/EePnyYpUuX4uPjwxNPPJHjdbfffjsAf/75p3VtWlxcHGazGYBKlSrl6/Xyy2Qy8frrrwMwb948Vq9eXehnhYeHW9c2vvbaayW+x+Qff/xh3YE1p96F48ePp3r16gB8//331vMVKlQAjJ1hz507l6/XCw4Otm6+FBMTU8ioRUSKLyWEIiJlhI+PD6+88gonTpzgm2++4d5776VNmzb4+fkBcObMGaZMmULLli1Zv359oV6jU6dO2Z4PCwuzHnfs2DHPay5cuJDtNbVr18424QQICQkhMjISIEtpZ05WrVoFQGZmJi1atCA8PDzbj/79+wOQmJiY70SiqG644QZuuOEGoOitI5588kkqV65MbGwsb775pjPC8xjL323t2rVp0qRJttd4e3vTu3dvh+sBGjZs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/vpr7rrrLtq0aUNoaCjx8fEEBwfTqVMnXn31VXbu3EmzZs2s93Ts2JFZs2bx4IMPEhkZSZUqVbh48SIBAQG0bduWSZMmsXv3busssYhISWMym81mTwchIiKSm5deeomXX36ZHj16sHz5ck+HIyIiUmpohlBERERERKSMUkIoIiIiIiJSRikhFBERERERKaOUEIqIiIiIiJRR2lRGRERERESkjNIMoYiIiIiISBmlhFBERERERKSMUkIoIiIiIiJSRikhFBERERERKaOUEIqIiIiIiJRRSghFRERERETKKB9PByCG8PBwEhMTqVOnjqdDERERERGRYuLo0aOUK1eOU6dOueT5miEsJhITE0lLS/N0GCIiIiIiUoykpaWRmJjosudrhrCYsMwM7ty508ORiIiIiIhIcREREeHS52uGUEREREREpIxSQigiIiIiIlJGKSEUEREREREpo5QQioiIiIiIlFFKCEVERERERMooJYQiIiIiIiJllNpOiIiIiEiJZzabMZvNng5DJFcmkwmTyeTpMBwoIRQRERGREikzM5P4+HjOnz9PSkqKp8MRyRd/f38qVqxIaGgoXl6eL9hUQigiIiIiJY7ZbObUqVPEx8d7OhSRAklJSeHUqVNcvnyZ8PBwj88YKiEUERERkRInISHBmgxWq1aNkJAQvL29PRyVSO4yMjK4ePEiZ86c4cKFC5QrV46QkBCPxqSEUERERERKnIsXLwJQqVIlKleu7OFoRPLHy8uLypUrk56eTlxcHAkJCR5PCD1ftCoiIiIiUkBJSUkABAcHezgSkYKzfN8mJiZ6OBIlhCIiIiJSwpjNZjIyMgBjgw6RksbyfZuRkeHx3XGVEIqIiIhIiWL/C7SnN+QQKQz771slhCIiIiIiIuIRSghFRERERETKKCWEkqNzl9TgVURERESkNFNCKA6SUtOZvmw/N72/gq6vL+VSSrqnQxIRERGRXJhMpgJ91KtXz+kx1KtXz+XrOZcvX47JZKJnz54ufZ2yRn0IxYGvtxef/HOQ+OQ0AJbuOcPgNjU8HJWIiIiI5OSOO+7Icm7lypUcOHCANm3a0LZtW4fPValSxU2RSUmghFAc+Hp70adFGD9vOg7A4h0xSghFREREirEvv/wyy7k777yTAwcOMHToUF566SWXx/DXX3+Rlpbm8tcR51PJqGQxoGW49XjZnrMk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9fW1XhMfH09mZibVq1fPkgympaUxZ84cp8RSEN27dweMEtfsWGY6LdflpG7dujz11FMA7NixI9drIyIirBvY5HVtaVXmEkLLux2+vr5UqlQpz+u3bTMSofbt22f7ecv5qKgoJ0VYTJSrDLU62cZ7l+R6eX+73UaX7jlDSnrZrcMWERER8aT+/ftTpUoVNmzYwEcffQRkLRetVq0aoaGh7Nixg1WrVlnPZ2Rk8NRTT7F37163xgxwyy23EBYWxsqVK/nkk08cPjd16lQ2btxIzZo1HdpLTJkyhVOnsk5GWCZratc2WqIlJSUxdepULly44HBdZmYmixcvdri2rCmVJaO5ee+99wDjfxR/f/88rz961OixV6tWrWw/bzmf09R2idakLxxbaxzvXQw9n8rx0h5NqhLo601yWgaXUtJZuS+W65uH5Xi9iIiIiLiGr68vo0aNYtq0acTGxtK4cWM6d+7scI2Pjw+TJk3iP//5Dz169KB3795UqlSJdevWcfr0aSZMmMD06dOdFlNMTEy2LS4snn/+eW688Ua+++47Bg0axAMPPMAnn3xCkyZN2LNnD1u2bKF8+fLMnDnT2oMQ4OWXX+aJJ56gTZs2NG7cGLPZzLZt29i7dy+VKlXiiSeeACA1NZVHH32UJ554gsjISOrVq0dqaiobNmzg2LFj1KtXj/vvz773dmlXphLChQsX8vnnn+Pr68urr76ar3suXboEQFBQULafL1euHJD/HZhy2t72wIEDNGzYMF/PcJsm/eGvV4zjk5sh4TQEZ5/kBfp506tZVRZuN96hWbTjlBJCEREREQ8ZN24c06ZNAxx7D9p79tlnqVWrFu+++y6rVq0iMDCQbt268corr7B582anxpOamsq6dety/Lyln+D111/Phg0b+N///sfSpUuJioqiSpUqjB07lueee46mTZs63Pf++++zePFiNm3axKJFiwBjpm/ixIlMnDjRut6wfPnyTJ8+nb/++ott27YRFRWFn58fderU4d577+Whhx7KV/VgaVRmEsI9e/YwduxYzGYzb775pnUtoeSiWgsIrQ3xx4zxviXQflyOl/dvWd2aEP6x6zRpGZn4epe5qmQRERERj+vUqVO+dgi9/fbbuf3227Ocb926NXfeeWeW819++SVffvllvuOoV69egXcqjYiI4Pvvv8/XtePGjctSDpsdHx8f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3P5cL/fz8XJoUr8g6qSrIhMRERERkVwoIZSiC60FYa1s43zsNjqwtcpGRUREREQ8TQmhOIdD+4m81xGqbFRERERExPOUEIpz2LefOLoGki/kernKRkVEREREPE8JoThHzfYQVNk4zkyHA0vzvOXqstFLKhsVEREREXErJYTiHF7ejruN5rNsNDTQaFKfkp7JX7tPuyo6ERERERHJhhJCcR77dYT7lkBmRq6X+/l40VdN6kVEREREPEYJoThPw97gZWwUQ3IcnNiU5y0qGxURERER8RwlhOI8AaFQp6ttnI/2EyobFRERERHxHCWE4lz2u43mYx2hykZFRERERDxHCaE4l31CeHoHXDiW5y032pWNLlPZqIiIiIiI2yghFOeq0ggqNbSN9+Vjt9FGtrLRVJWNioiIiIi4jRJCcT6HstEleV7u662yURERERERT1BCKM7XxK4f4aG/ITUpz1tUNioiIiIi4n5KCMX56lwDfsHGcfplOPRPnreobFRERERExP2UEIrz+fhBo962cT7aT/h6e9EvwlY2uiBKZaMiIiIiIq6mhFBcw34d4b4lYDbnecvAVnZN6veqbFRERERExNWUEIprNOoDmIzjiyeMFhR5UNmoiIiIiIh7KSEU1yhfFWpG2sYqGxURERERKXaUEIrrOLSfyLsfIahsVERERETEnZQQius06Wc7Pr4REmPzvEVloyIiIiIi7qOEUFwnvBUE17gyMMO+P/K8RWWjIiIiIiLuo4RQXMdkcpwlzMc6QoAbW9ewHi/fe5aEy2nOjkxERERERFBCKK5mnxAeWArpqXneck3DylQIspWNLt1zxlXRiYiIiIiUaUoIxbXq9wCfAOM45SIcXZPnLb7eXvRtobJRERERERFXU0IoruUXBPWvs43zuduoykZFRERERFxPCaG4nn3Z6L78JYQqGxURERERcT0lhOJ6je0SwnP7IXZ/nrf4envRr0W4dfybykZFRERERJxOCaG4XoXaUC3CNs7nLOHA1rYm9X+rbFRERERExOmUEIp7FKL9hMpGRURERERcSwmhuEeT/rbjI6vhcnyet6hsVERERETEtZQQinvU6gCBlYzjzHQ4sCxft6lsVERERETEdZQQint4eUPjPrZxPttPXF02+tdulY2KiIiIiDiLEkJxH4f2E0sgMyPPW64uG12wXWWjIiIiIiLOooRQ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\n",
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "=== MLP (mejor) ===\n",
            "\n",
            "Reporte (classification_report): outputs/MLP_sigmoid_hs[512, 256]_do0.4_PCA95_classification_report.csv\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "                001   002       003       004       005        006       007  \\\n",
              "precision  1.000000   0.6  1.000000  0.571429  0.666667   0.636364  0.700000   \n",
              "recall     0.625000   0.6  0.166667  0.444444  0.666667   0.700000  0.777778   \n",
              "f1-score   0.769231   0.6  0.285714  0.500000  0.666667   0.666667  0.736842   \n",
              "support    8.000000  10.0  6.000000  9.000000  9.000000  10.000000  9.000000   \n",
              "\n",
              "                008       009       010  accuracy  macro avg  weighted avg  \n",
              "precision  0.714286  0.500000  0.437500  0.619048   0.682624      0.664469  \n",
              "recall     1.000000  0.444444  0.777778  0.619048   0.620278      0.619048  \n",
              "f1-score   0.833333  0.470588  0.560000  0.619048   0.608904      0.608433  \n",
              "support    5.000000  9.000000  9.000000  0.619048  84.000000     84.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-bc45426a-fd7e-434f-b83c-56c81dbc6c7a\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>001</th>\n",
              "      <th>002</th>\n",
              "      <th>003</th>\n",
              "      <th>004</th>\n",
              "      <th>005</th>\n",
              "      <th>006</th>\n",
              "      <th>007</th>\n",
              "      <th>008</th>\n",
              "      <th>009</th>\n",
              "      <th>010</th>\n",
              "      <th>accuracy</th>\n",
              "      <th>macro avg</th>\n",
              "      <th>weighted avg</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>precision</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.6</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.571429</td>\n",
              "      <td>0.666667</td>\n",
              "      <td>0.636364</td>\n",
              "      <td>0.700000</td>\n",
              "      <td>0.714286</td>\n",
              "      <td>0.500000</td>\n",
              "      <td>0.437500</td>\n",
              "      <td>0.619048</td>\n",
              "      <td>0.682624</td>\n",
              "      <td>0.664469</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>recall</th>\n",
              "      <td>0.625000</td>\n",
              "      <td>0.6</td>\n",
              "      <td>0.166667</td>\n",
              "      <td>0.444444</td>\n",
              "      <td>0.666667</td>\n",
              "      <td>0.700000</td>\n",
              "      <td>0.777778</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.444444</td>\n",
              "      <td>0.777778</td>\n",
              "      <td>0.619048</td>\n",
              "      <td>0.620278</td>\n",
              "      <td>0.619048</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>f1-score</th>\n",
              "      <td>0.769231</td>\n",
              "      <td>0.6</td>\n",
              "      <td>0.285714</td>\n",
              "      <td>0.500000</td>\n",
              "      <td>0.666667</td>\n",
              "      <td>0.666667</td>\n",
              "      <td>0.736842</td>\n",
              "      <td>0.833333</td>\n",
              "      <td>0.470588</td>\n",
              "      <td>0.560000</td>\n",
              "      <td>0.619048</td>\n",
              "      <td>0.608904</td>\n",
              "      <td>0.608433</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>support</th>\n",
              "      <td>8.000000</td>\n",
              "      <td>10.0</td>\n",
              "      <td>6.000000</td>\n",
              "      <td>9.000000</td>\n",
              "      <td>9.000000</td>\n",
              "      <td>10.000000</td>\n",
              "      <td>9.000000</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>9.000000</td>\n",
              "      <td>9.000000</td>\n",
              "      <td>0.619048</td>\n",
              "      <td>84.000000</td>\n",
              "      <td>84.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bc45426a-fd7e-434f-b83c-56c81dbc6c7a')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-bc45426a-fd7e-434f-b83c-56c81dbc6c7a button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-bc45426a-fd7e-434f-b83c-56c81dbc6c7a');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-08f4bb85-1fef-482a-a461-b2fd0622b158\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-08f4bb85-1fef-482a-a461-b2fd0622b158')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-08f4bb85-1fef-482a-a461-b2fd0622b158 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"show_confusion(best_title_cnn)\",\n  \"rows\": 4,\n  \"fields\": [\n    {\n      \"column\": \"001\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.604272125100316,\n        \"min\": 0.625,\n        \"max\": 8.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.625,\n          8.0,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"002\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.7,\n        \"min\": 0.6,\n        \"max\": 10.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          10.0,\n          0.6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"003\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.7823799744095816,\n        \"min\": 0.1666666666666666,\n        \"max\": 6.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.1666666666666666,\n          6.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"004\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.247672506010434,\n        \"min\": 0.4444444444444444,\n        \"max\": 9.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.4444444444444444,\n          9.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"005\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.166666666666667,\n        \"min\": 0.6666666666666666,\n        \"max\": 9.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          9.0,\n          0.6666666666666666\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"006\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.666233992142002,\n        \"min\": 0.6363636363636364,\n        \"max\": 10.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.7,\n          10.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"007\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.131018832339036,\n        \"min\": 0.7,\n        \"max\": 9.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.7777777777777778,\n          9.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"008\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.078702335920308,\n        \"min\": 0.7142857142857143,\n        \"max\": 5.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          1.0,\n          5.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"009\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.2642216062406675,\n        \"min\": 0.4444444444444444,\n        \"max\": 9.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.4444444444444444,\n          9.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"010\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.206474839440464,\n        \"min\": 0.4375,\n        \"max\": 9.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.7777777777777778,\n          9.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"accuracy\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 0.6190476190476191,\n        \"max\": 0.6190476190476191,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.6190476190476191\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"macro avg\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 41.68137818993255,\n        \"min\": 0.6089042062168998,\n        \"max\": 84.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.6202777777777778\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"weighted avg\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 41.68468216351481,\n        \"min\": 0.6084325984104842,\n        \"max\": 84.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.6190476190476191\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Matriz de confusión (cruda): outputs/MLP_sigmoid_hs[512, 256]_do0.4_PCA95_confusion_matrix.csv\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "          pred_001  pred_002  pred_003  pred_004  pred_005  pred_006  \\\n",
              "true_001         5         0         0         0         0         0   \n",
              "true_002         0         6         0         1         1         0   \n",
              "true_003         0         1         1         0         1         1   \n",
              "true_004         0         1         0         4         1         0   \n",
              "true_005         0         0         0         0         6         0   \n",
              "true_006         0         0         0         1         0         7   \n",
              "true_007         0         1         0         0         0         0   \n",
              "true_008         0         0         0         0         0         0   \n",
              "true_009         0         1         0         0         0         3   \n",
              "true_010         0         0         0         1         0         0   \n",
              "\n",
              "          pred_007  pred_008  pred_009  pred_010  \n",
              "true_001         0         0         0         3  \n",
              "true_002         0         1         0         1  \n",
              "true_003         0         1         1         0  \n",
              "true_004         0         0         1         2  \n",
              "true_005         1         0         0         2  \n",
              "true_006         1         0         1         0  \n",
              "true_007         7         0         0         1  \n",
              "true_008         0         5         0         0  \n",
              "true_009         1         0         4         0  \n",
              "true_010         0         0         1         7  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0ef74bab-edc7-4090-841c-4d7084d60fca\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>pred_001</th>\n",
              "      <th>pred_002</th>\n",
              "      <th>pred_003</th>\n",
              "      <th>pred_004</th>\n",
              "      <th>pred_005</th>\n",
              "      <th>pred_006</th>\n",
              "      <th>pred_007</th>\n",
              "      <th>pred_008</th>\n",
              "      <th>pred_009</th>\n",
              "      <th>pred_010</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>true_001</th>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>true_002</th>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>true_003</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>true_004</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>true_005</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>true_006</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>7</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>true_007</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>7</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>true_008</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>true_009</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>true_010</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0ef74bab-edc7-4090-841c-4d7084d60fca')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-0ef74bab-edc7-4090-841c-4d7084d60fca button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-0ef74bab-edc7-4090-841c-4d7084d60fca');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-327e7d58-5846-4e72-af78-e601b21ad282\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-327e7d58-5846-4e72-af78-e601b21ad282')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-327e7d58-5846-4e72-af78-e601b21ad282 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"show_confusion(best_title_cnn)\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"pred_001\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 5,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred_002\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 6,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0,\n          6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred_003\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred_004\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 4,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred_005\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 6,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred_006\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 0,\n        \"max\": 7,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          1,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred_007\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 0,\n        \"max\": 7,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred_008\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 5,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred_009\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 4,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred_010\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 0,\n        \"max\": 7,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1,\n          7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Matriz de confusión (normalizada por fila): outputs/MLP_sigmoid_hs[512, 256]_do0.4_PCA95_confusion_matrix_norm.csv\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "          pred_001  pred_002  pred_003  pred_004  pred_005  pred_006  \\\n",
              "true_001     0.625  0.000000  0.000000  0.000000  0.000000  0.000000   \n",
              "true_002     0.000  0.600000  0.000000  0.100000  0.100000  0.000000   \n",
              "true_003     0.000  0.166667  0.166667  0.000000  0.166667  0.166667   \n",
              "true_004     0.000  0.111111  0.000000  0.444444  0.111111  0.000000   \n",
              "true_005     0.000  0.000000  0.000000  0.000000  0.666667  0.000000   \n",
              "true_006     0.000  0.000000  0.000000  0.100000  0.000000  0.700000   \n",
              "true_007     0.000  0.111111  0.000000  0.000000  0.000000  0.000000   \n",
              "true_008     0.000  0.000000  0.000000  0.000000  0.000000  0.000000   \n",
              "true_009     0.000  0.111111  0.000000  0.000000  0.000000  0.333333   \n",
              "true_010     0.000  0.000000  0.000000  0.111111  0.000000  0.000000   \n",
              "\n",
              "          pred_007  pred_008  pred_009  pred_010  \n",
              "true_001  0.000000  0.000000  0.000000  0.375000  \n",
              "true_002  0.000000  0.100000  0.000000  0.100000  \n",
              "true_003  0.000000  0.166667  0.166667  0.000000  \n",
              "true_004  0.000000  0.000000  0.111111  0.222222  \n",
              "true_005  0.111111  0.000000  0.000000  0.222222  \n",
              "true_006  0.100000  0.000000  0.100000  0.000000  \n",
              "true_007  0.777778  0.000000  0.000000  0.111111  \n",
              "true_008  0.000000  1.000000  0.000000  0.000000  \n",
              "true_009  0.111111  0.000000  0.444444  0.000000  \n",
              "true_010  0.000000  0.000000  0.111111  0.777778  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-39cf589d-4c7e-4c05-ad3f-be266a3477b5\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>pred_001</th>\n",
              "      <th>pred_002</th>\n",
              "      <th>pred_003</th>\n",
              "      <th>pred_004</th>\n",
              "      <th>pred_005</th>\n",
              "      <th>pred_006</th>\n",
              "      <th>pred_007</th>\n",
              "      <th>pred_008</th>\n",
              "      <th>pred_009</th>\n",
              "      <th>pred_010</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>true_001</th>\n",
              "      <td>0.625</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.375000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>true_002</th>\n",
              "      <td>0.000</td>\n",
              "      <td>0.600000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.100000</td>\n",
              "      <td>0.100000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.100000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.100000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>true_003</th>\n",
              "      <td>0.000</td>\n",
              "      <td>0.166667</td>\n",
              "      <td>0.166667</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.166667</td>\n",
              "      <td>0.166667</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.166667</td>\n",
              "      <td>0.166667</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>true_004</th>\n",
              "      <td>0.000</td>\n",
              "      <td>0.111111</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.444444</td>\n",
              "      <td>0.111111</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.111111</td>\n",
              "      <td>0.222222</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>true_005</th>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.666667</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.111111</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.222222</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>true_006</th>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.100000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.700000</td>\n",
              "      <td>0.100000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.100000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>true_007</th>\n",
              "      <td>0.000</td>\n",
              "      <td>0.111111</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.777778</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.111111</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>true_008</th>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>true_009</th>\n",
              "      <td>0.000</td>\n",
              "      <td>0.111111</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.333333</td>\n",
              "      <td>0.111111</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.444444</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>true_010</th>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.111111</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.111111</td>\n",
              "      <td>0.777778</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-39cf589d-4c7e-4c05-ad3f-be266a3477b5')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-39cf589d-4c7e-4c05-ad3f-be266a3477b5 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-39cf589d-4c7e-4c05-ad3f-be266a3477b5');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-60aad618-7cc6-467b-aff9-9bea9e759e54\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-60aad618-7cc6-467b-aff9-9bea9e759e54')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-60aad618-7cc6-467b-aff9-9bea9e759e54 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"show_confusion(best_title_cnn)\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"pred_001\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.19764235376052372,\n        \"min\": 0.0,\n        \"max\": 0.625,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.0,\n          0.625\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred_002\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.18373134126036672,\n        \"min\": 0.0,\n        \"max\": 0.6,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.6,\n          0.111111\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred_003\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.05270473307872832,\n        \"min\": 0.0,\n        \"max\": 0.166667,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.166667,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred_004\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.1385599700308298,\n        \"min\": 0.0,\n        \"max\": 0.444444,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.1,\n          0.111111\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred_005\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.20695729465453064,\n        \"min\": 0.0,\n        \"max\": 0.666667,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.1,\n          0.666667\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred_006\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.23211318545964213,\n        \"min\": 0.0,\n        \"max\": 0.7,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.166667,\n          0.333333\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred_007\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.24005321769372537,\n        \"min\": 0.0,\n        \"max\": 0.777778,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.111111,\n          0.777778\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred_008\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3122202498949348,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.1,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred_009\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.138599590258373,\n        \"min\": 0.0,\n        \"max\": 0.444444,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.166667,\n          0.444444\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred_010\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.24487359149027163,\n        \"min\": 0.0,\n        \"max\": 0.777778,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0.375,\n          0.1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "=== CNN (mejor) ===\n",
            "\n",
            "Reporte (classification_report): outputs/SimpleCNN_classification_report.csv\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "                001   002       003       004       005        006       007  \\\n",
              "precision  1.000000   0.9  1.000000  0.500000  0.727273   0.857143  0.900000   \n",
              "recall     0.750000   0.9  0.500000  0.555556  0.888889   0.600000  1.000000   \n",
              "f1-score   0.857143   0.9  0.666667  0.526316  0.800000   0.705882  0.947368   \n",
              "support    8.000000  10.0  6.000000  9.000000  9.000000  10.000000  9.000000   \n",
              "\n",
              "           008       009       010  accuracy  macro avg  weighted avg  \n",
              "precision  1.0  0.727273  0.636364  0.785714   0.824805      0.809400  \n",
              "recall     1.0  0.888889  0.777778  0.785714   0.786111      0.785714  \n",
              "f1-score   1.0  0.800000  0.700000  0.785714   0.790338      0.784275  \n",
              "support    5.0  9.000000  9.000000  0.785714  84.000000     84.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d823878e-38ce-4cea-9555-98a372be2f33\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>001</th>\n",
              "      <th>002</th>\n",
              "      <th>003</th>\n",
              "      <th>004</th>\n",
              "      <th>005</th>\n",
              "      <th>006</th>\n",
              "      <th>007</th>\n",
              "      <th>008</th>\n",
              "      <th>009</th>\n",
              "      <th>010</th>\n",
              "      <th>accuracy</th>\n",
              "      <th>macro avg</th>\n",
              "      <th>weighted avg</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>precision</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.9</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.500000</td>\n",
              "      <td>0.727273</td>\n",
              "      <td>0.857143</td>\n",
              "      <td>0.900000</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.727273</td>\n",
              "      <td>0.636364</td>\n",
              "      <td>0.785714</td>\n",
              "      <td>0.824805</td>\n",
              "      <td>0.809400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>recall</th>\n",
              "      <td>0.750000</td>\n",
              "      <td>0.9</td>\n",
              "      <td>0.500000</td>\n",
              "      <td>0.555556</td>\n",
              "      <td>0.888889</td>\n",
              "      <td>0.600000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.888889</td>\n",
              "      <td>0.777778</td>\n",
              "      <td>0.785714</td>\n",
              "      <td>0.786111</td>\n",
              "      <td>0.785714</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>f1-score</th>\n",
              "      <td>0.857143</td>\n",
              "      <td>0.9</td>\n",
              "      <td>0.666667</td>\n",
              "      <td>0.526316</td>\n",
              "      <td>0.800000</td>\n",
              "      <td>0.705882</td>\n",
              "      <td>0.947368</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.800000</td>\n",
              "      <td>0.700000</td>\n",
              "      <td>0.785714</td>\n",
              "      <td>0.790338</td>\n",
              "      <td>0.784275</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>support</th>\n",
              "      <td>8.000000</td>\n",
              "      <td>10.0</td>\n",
              "      <td>6.000000</td>\n",
              "      <td>9.000000</td>\n",
              "      <td>9.000000</td>\n",
              "      <td>10.000000</td>\n",
              "      <td>9.000000</td>\n",
              "      <td>5.0</td>\n",
              "      <td>9.000000</td>\n",
              "      <td>9.000000</td>\n",
              "      <td>0.785714</td>\n",
              "      <td>84.000000</td>\n",
              "      <td>84.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d823878e-38ce-4cea-9555-98a372be2f33')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d823878e-38ce-4cea-9555-98a372be2f33 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d823878e-38ce-4cea-9555-98a372be2f33');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-baac741b-14d6-4827-b947-3e5cef859956\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-baac741b-14d6-4827-b947-3e5cef859956')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-baac741b-14d6-4827-b947-3e5cef859956 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"show_confusion(best_title_cnn)\",\n  \"rows\": 4,\n  \"fields\": [\n    {\n      \"column\": \"001\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.566946592422892,\n        \"min\": 0.75,\n        \"max\": 8.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.75,\n          8.0,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"002\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.55,\n        \"min\": 0.9,\n        \"max\": 10.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          10.0,\n          0.9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"003\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.647063362378099,\n        \"min\": 0.5,\n        \"max\": 6.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.5,\n          6.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"004\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.236415544414492,\n        \"min\": 0.5,\n        \"max\": 9.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.5555555555555556,\n          9.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"005\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.097839372362155,\n        \"min\": 0.7272727272727273,\n        \"max\": 9.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.8888888888888888,\n          9.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"006\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.640695644996192,\n        \"min\": 0.6,\n        \"max\": 10.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.6,\n          10.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"007\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.02564579908901,\n        \"min\": 0.9,\n        \"max\": 9.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          1.0,\n          9.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"008\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.0,\n        \"min\": 1.0,\n        \"max\": 5.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          5.0,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"009\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.097839372362155,\n        \"min\": 0.7272727272727273,\n        \"max\": 9.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.8888888888888888,\n          9.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"010\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.148046211005352,\n        \"min\": 0.6363636363636364,\n        \"max\": 9.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.7777777777777778,\n          9.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"accuracy\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 0.7857142857142857,\n        \"max\": 0.7857142857142857,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.7857142857142857\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"macro avg\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 41.599794624166364,\n        \"min\": 0.7861111111111112,\n        \"max\": 84.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.7861111111111112\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"weighted avg\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 41.603436645139034,\n        \"min\": 0.7842752890629937,\n        \"max\": 84.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.7857142857142857\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Matriz de confusión (cruda): outputs/SimpleCNN_confusion_matrix.csv\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "          pred_001  pred_002  pred_003  pred_004  pred_005  pred_006  \\\n",
              "true_001         6         0         0         0         0         0   \n",
              "true_002         0         9         0         0         0         0   \n",
              "true_003         0         0         3         0         1         0   \n",
              "true_004         0         1         0         5         1         0   \n",
              "true_005         0         0         0         1         8         0   \n",
              "true_006         0         0         0         3         0         6   \n",
              "true_007         0         0         0         0         0         0   \n",
              "true_008         0         0         0         0         0         0   \n",
              "true_009         0         0         0         0         0         1   \n",
              "true_010         0         0         0         1         1         0   \n",
              "\n",
              "          pred_007  pred_008  pred_009  pred_010  \n",
              "true_001         0         0         0         2  \n",
              "true_002         0         0         0         1  \n",
              "true_003         0         0         2         0  \n",
              "true_004         1         0         0         1  \n",
              "true_005         0         0         0         0  \n",
              "true_006         0         0         1         0  \n",
              "true_007         9         0         0         0  \n",
              "true_008         0         5         0         0  \n",
              "true_009         0         0         8         0  \n",
              "true_010         0         0         0         7  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ab5e0e70-067f-428a-9f8f-a3efdaac8ea9\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>pred_001</th>\n",
              "      <th>pred_002</th>\n",
              "      <th>pred_003</th>\n",
              "      <th>pred_004</th>\n",
              "      <th>pred_005</th>\n",
              "      <th>pred_006</th>\n",
              "      <th>pred_007</th>\n",
              "      <th>pred_008</th>\n",
              "      <th>pred_009</th>\n",
              "      <th>pred_010</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>true_001</th>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>true_002</th>\n",
              "      <td>0</td>\n",
              "      <td>9</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>true_003</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>true_004</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>true_005</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>8</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>true_006</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>true_007</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>9</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>true_008</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>true_009</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>8</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>true_010</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ab5e0e70-067f-428a-9f8f-a3efdaac8ea9')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ab5e0e70-067f-428a-9f8f-a3efdaac8ea9 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ab5e0e70-067f-428a-9f8f-a3efdaac8ea9');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-c770bde9-b247-40a5-94b1-3a1151dec6df\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c770bde9-b247-40a5-94b1-3a1151dec6df')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-c770bde9-b247-40a5-94b1-3a1151dec6df button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"show_confusion(best_title_cnn)\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"pred_001\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 6,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred_002\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 0,\n        \"max\": 9,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0,\n          9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred_003\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 3,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          3,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred_004\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 5,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          5,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred_005\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 0,\n        \"max\": 8,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred_006\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 6,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0,\n          6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred_007\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 0,\n        \"max\": 9,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred_008\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 5,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          5,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred_009\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 0,\n        \"max\": 8,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred_010\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 0,\n        \"max\": 7,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          1,\n          7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Matriz de confusión (normalizada por fila): outputs/SimpleCNN_confusion_matrix_norm.csv\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "          pred_001  pred_002  pred_003  pred_004  pred_005  pred_006  \\\n",
              "true_001      0.75  0.000000       0.0  0.000000  0.000000  0.000000   \n",
              "true_002      0.00  0.900000       0.0  0.000000  0.000000  0.000000   \n",
              "true_003      0.00  0.000000       0.5  0.000000  0.166667  0.000000   \n",
              "true_004      0.00  0.111111       0.0  0.555556  0.111111  0.000000   \n",
              "true_005      0.00  0.000000       0.0  0.111111  0.888889  0.000000   \n",
              "true_006      0.00  0.000000       0.0  0.300000  0.000000  0.600000   \n",
              "true_007      0.00  0.000000       0.0  0.000000  0.000000  0.000000   \n",
              "true_008      0.00  0.000000       0.0  0.000000  0.000000  0.000000   \n",
              "true_009      0.00  0.000000       0.0  0.000000  0.000000  0.111111   \n",
              "true_010      0.00  0.000000       0.0  0.111111  0.111111  0.000000   \n",
              "\n",
              "          pred_007  pred_008  pred_009  pred_010  \n",
              "true_001  0.000000       0.0  0.000000  0.250000  \n",
              "true_002  0.000000       0.0  0.000000  0.100000  \n",
              "true_003  0.000000       0.0  0.333333  0.000000  \n",
              "true_004  0.111111       0.0  0.000000  0.111111  \n",
              "true_005  0.000000       0.0  0.000000  0.000000  \n",
              "true_006  0.000000       0.0  0.100000  0.000000  \n",
              "true_007  1.000000       0.0  0.000000  0.000000  \n",
              "true_008  0.000000       1.0  0.000000  0.000000  \n",
              "true_009  0.000000       0.0  0.888889  0.000000  \n",
              "true_010  0.000000       0.0  0.000000  0.777778  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7a9e6a20-4d69-4636-97fa-872a9ef31cf5\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>pred_001</th>\n",
              "      <th>pred_002</th>\n",
              "      <th>pred_003</th>\n",
              "      <th>pred_004</th>\n",
              "      <th>pred_005</th>\n",
              "      <th>pred_006</th>\n",
              "      <th>pred_007</th>\n",
              "      <th>pred_008</th>\n",
              "      <th>pred_009</th>\n",
              "      <th>pred_010</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>true_001</th>\n",
              "      <td>0.75</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.250000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>true_002</th>\n",
              "      <td>0.00</td>\n",
              "      <td>0.900000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.100000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>true_003</th>\n",
              "      <td>0.00</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.5</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.166667</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.333333</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>true_004</th>\n",
              "      <td>0.00</td>\n",
              "      <td>0.111111</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.555556</td>\n",
              "      <td>0.111111</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.111111</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.111111</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>true_005</th>\n",
              "      <td>0.00</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.111111</td>\n",
              "      <td>0.888889</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>true_006</th>\n",
              "      <td>0.00</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.300000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.600000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.100000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>true_007</th>\n",
              "      <td>0.00</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>true_008</th>\n",
              "      <td>0.00</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>true_009</th>\n",
              "      <td>0.00</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.111111</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.888889</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>true_010</th>\n",
              "      <td>0.00</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.111111</td>\n",
              "      <td>0.111111</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.777778</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7a9e6a20-4d69-4636-97fa-872a9ef31cf5')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-7a9e6a20-4d69-4636-97fa-872a9ef31cf5 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-7a9e6a20-4d69-4636-97fa-872a9ef31cf5');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-750f93a3-1636-48a6-ab3f-4b9d8fe98360\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-750f93a3-1636-48a6-ab3f-4b9d8fe98360')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-750f93a3-1636-48a6-ab3f-4b9d8fe98360 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"show_confusion(best_title_cnn)\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"pred_001\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.23717082451262844,\n        \"min\": 0.0,\n        \"max\": 0.75,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.0,\n          0.75\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred_002\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.282864535479618,\n        \"min\": 0.0,\n        \"max\": 0.9,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0.0,\n          0.9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred_003\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.15811388300841897,\n        \"min\": 0.0,\n        \"max\": 0.5,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.5,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred_004\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.1847440379581075,\n        \"min\": 0.0,\n        \"max\": 0.555556,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.555556,\n          0.3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred_005\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2747364778036502,\n        \"min\": 0.0,\n        \"max\": 0.888889,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.166667,\n          0.888889\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred_006\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.18908486304329072,\n        \"min\": 0.0,\n        \"max\": 0.6,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0.0,\n          0.6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred_007\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3142696805273564,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0.0,\n          0.111111\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred_008\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.31622776601683794,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred_009\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2860472846462821,\n        \"min\": 0.0,\n        \"max\": 0.888889,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.333333,\n          0.888889\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pred_010\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2441082811133207,\n        \"min\": 0.0,\n        \"max\": 0.777778,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.1,\n          0.777778\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    }
  ]
}